name:t = "CD-30"
type:t = "radar"
showMissileLaunchZone:b = true
transivers {
	search {
		sideLobesAttenuation:r = -18
		power:r = 250
		band:i = 8
		rcs:r = 3
		range:r = 12000
		rangeMax:r = 20000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			azimuth {
				angleHalfSens:r = 4.8
				sideLobesSensitivity:r = -24
			}
			elevation {
				angleHalfSens:r = 10
				sideLobesSensitivity:r = -24
			}
		}
	}
	track {
		sideLobesAttenuation:r = -18
		power:r = 250
		band:i = 8
		rcs:r = 3
		range:r = 10000
		rangeMax:r = 20000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4.8
			sideLobesSensitivity:r = -24
		}
	}
}
signals {
	search {
		dynamicRange:p2 = 40, 3
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = false
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 20000
			width:r = 300
		}
	}
	track {
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.07
		distanceAccuracy:r = 25
		track:b = true
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 20000
			width:r = 300
		}
	}
}
scanPatterns {
	search2BarsLow {
		type:t = "pyramide"
		azimuthLimits:p2 = -30, 30
		elevationLimits:p2 = -12, 12
		rollStabLimit:r = 70
		period:r = 1.7
		width:r = 30
		barHeight:r = 8
		barsCount:i = 2
		rowMajor:b = true
		barsOneWay:b = true
		centerElevation:r = 3
	}
	search3Bars {
		type:t = "pyramide"
		azimuthLimits:p2 = -30, 30
		elevationLimits:p2 = -12, 12
		rollStabLimit:r = 70
		period:r = 2.5
		width:r = 30
		barHeight:r = 8
		barsCount:i = 3
		rowMajor:b = true
		barsOneWay:b = false
		centerElevation:r = -1.5
	}
	search2BarsHigh {
		type:t = "pyramide"
		azimuthLimits:p2 = -30, 30
		elevationLimits:p2 = -12, 12
		rollStabLimit:r = 70
		period:r = 1.7
		width:r = 30
		barHeight:r = 8
		barsCount:i = 2
		rowMajor:b = true
		barsOneWay:b = true
		centerElevation:r = 5.5
	}
	lock {
		type:t = "cone"
		azimuthLimits:p2 = -30, 30
		elevationLimits:p2 = -17, 17
		rollStabLimit:r = 30
		period:r = 0.5
		width:r = 2.5
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -30, 30
		elevationLimits:p2 = -17, 17
		rollStabLimit:r = 30
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "search2BarsLow"
		scanPattern2:t = "search3Bars"
		scanPattern3:t = "search2BarsHigh"
	}
	acmLock {
		scanPattern1:t = "lock"
	}
}
scopeRangeSets {
	search {
		range1:r = 20000
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -5, 5
					distanceRange:p2 = 0, 10000
				}
				setTransiver {
					transiver:t = "search"
				}
				setSignal {
					signal:t = "search"
				}
			}
			setStandbyMode {
				setModeName {
					name:t = "standby"
				}
				setEnabled {
					value:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setTransiver {
					transiver:t = "search"
				}
				setSignal {
					signal:t = "search"
				}
			}
			resetStandbyMode {

			}
			setSearchMode {
				setModeName {
					name:t = "search"
				}
				setEnabled {
					value:b = true
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setTransiver {
					transiver:t = "search"
				}
				setSignal {
					signal:t = "search"
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
			}
			setAcmLockMode {
				setModeName {
					name:t = "ACM"
				}
				setEnabled {
					value:b = true
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setScopeRangeSet {

				}
				resetScanPhase {

				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 5000
					width:r = 10000
				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setTransiver {
					transiver:t = "track"
				}
				setSignal {
					signal:t = "track"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "lock"
					active:b = false
				}
			}
			setTrackMode {
				setModeName {
					name:t = "track"
				}
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				clearTargetsOfInterest {

				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setTransiver {
					transiver:t = "track"
				}
				setSignal {
					signal:t = "track"
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
					setStandbyMode {

					}
				}
			}
			switchOn {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					setSearchMode {

					}
				}
			}
			switchOff {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetSearchMode {

					}
					setStandbyMode {

					}
				}
			}
			switchScanPattern {
				stateFrom:t = "acmLock"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				command:t = "selectTarget"
				actions {
					resetSearchMode {

					}
					setAcmLockMode {

					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				command:t = "selectTarget"
				actions {
					resetStandbyMode {

					}
					setAcmLockMode {

					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					resetAcmLockMode {

					}
					setTrackMode {

					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetAcmLockMode {

					}
					setStandbyMode {

					}
				}
			}
			acmLockToSearch {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					resetAcmLockMode {

					}
					setSearchMode {

					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					resetTrackMode {

					}
					setAcmLockMode {

					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetTrackMode {

					}
					setStandbyMode {

					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					resetTrackMode {

					}
					setSearchMode {

					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
				}
			}
		}
	}
	lock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "track"
		transitions {
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
						rangeMult:r = 1
					}
				}
			}
			track {
				event:t = "targetDetected"
				actions {
					updateActiveTargetOfInterest {

					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			extrapolate {
				event:t = "targetNotDetected"
				actions {
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 3
						dirRateLim:r = 1
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
		}
	}
}