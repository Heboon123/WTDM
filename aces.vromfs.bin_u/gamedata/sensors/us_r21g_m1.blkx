type:t = "radar"
name:t = "US R21G M1"
showMissileLaunchZone:b = true
transivers {
	pulse {
		sideLobesAttenuation:r = -20
		power:r = 200
		band:i = 8
		rcs:r = 3
		range:r = 32000
		rangeMax:r = 45000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4.2
			sideLobesSensitivity:r = -28
		}
	}
	mti {
		sideLobesAttenuation:r = -20
		power:r = 200
		band:i = 8
		rcs:r = 3
		range:r = 18000
		rangeMax:r = 25000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4.2
			sideLobesSensitivity:r = -28
		}
	}
}
illuminationTransmitter {
	power:r = 200
	antenna {
		angleHalfSens:r = 12
		sideLobesSensitivity:r = -27
	}
}
scanPatterns {
	searchWide {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -15, 15
		rollStabLimit:r = 70
		pitchStabLimit:r = 15
		period:r = 1
		width:r = 58
		barHeight:r = 4.2
		barsCount:i = 1
		rowMajor:b = true
		barsOneWay:b = false
	}
	searchNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -15, 15
		rollStabLimit:r = 70
		pitchStabLimit:r = 15
		period:r = 0.333
		width:r = 20
		barHeight:r = 4.2
		barsCount:i = 1
		rowMajor:b = true
		barsOneWay:b = false
	}
	bvrLockSearch {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -15, 15
		rollStabLimit:r = 70
		pitchStabLimit:r = 15
		period:r = 0.5
		width:r = 2
		indicate:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -15, 15
		period:r = 0.5
		width:r = 2
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -45, 45
	}
}
signals {
	pulseSearch {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 74000
			width:r = 300
		}
	}
	pulseTrack {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		track:b = true
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 74000
			width:r = 300
		}
	}
	mtiSearch {
		dynamicRange:p2 = 40, 12
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		absDopplerSpeed:b = true
		mainBeamDopplerSpeed:b = true
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 45000
			width:r = 300
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 30
			maxValue:r = 1500
			signalWidthMin:r = 10
			width:r = 0
		}
	}
	mtiTrack {
		dynamicRange:p2 = 40, 12
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.06
		distanceAccuracy:r = 15
		absDopplerSpeed:b = true
		mainBeamDopplerSpeed:b = true
		track:b = true
		distance {
			presents:b = true
			minValue:r = 300
			maxValue:r = 45000
			width:r = 300
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 25
			maxValue:r = 1500
			signalWidthMin:r = 10
			width:r = 0
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchWide"
		scanPattern2:t = "searchNarrow"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
	}
}
scopeRangeSets {
	pulseSearch {
		range1:r = 18500
		range2:r = 37000
		range3:r = 74000
	}
	mtiSearch {
		range1:r = 18500
		range2:r = 37000
	}
	acm {
		range1:r = 4000
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -60, 60
					elevationRange:p2 = -15, 15
					distanceRange:p2 = 500, 55000
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
			}
			setBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 5000
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 2250
					width:r = 1750
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setTransiver {
					transiver:t = "pulse"
				}
				setSignal {
					signal:t = "pulseTrack"
				}
				setModeName {
					name:t = "PD ACM"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setPulseStandbyMode {
				setStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "pulse"
				}
				setSignal {
					signal:t = "pulseSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "pulseSearch"
				}
				setModeName {
					name:t = "standby"
				}
			}
			setMtiStandbyMode {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setTransiver {
					transiver:t = "mti"
				}
				setSignal {
					signal:t = "mtiSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "mtiSearch"
				}
				setModeName {
					name:t = "MTI standby"
				}
			}
			setPulseSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "pulse"
				}
				setSignal {
					signal:t = "pulseSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "pulseSearch"
				}
				setModeName {
					name:t = "search"
				}
			}
			setMtiSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mti"
				}
				setSignal {
					signal:t = "mtiSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "mtiSearch"
				}
				setModeName {
					name:t = "MTI search"
				}
			}
			setPulseBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD acquisition"
				}
			}
			setMtiBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "acquisition"
				}
			}
			setPulseAcmLockParams {
				setTransiver {
					transiver:t = "pulse"
				}
				setSignal {
					signal:t = "pulseTrack"
				}
				setModeName {
					name:t = "ACM"
				}
			}
			setMtiAcmLockParams {
				setTransiver {
					transiver:t = "mti"
				}
				setSignal {
					signal:t = "mtiTrack"
				}
				setModeName {
					name:t = "MTI ACM"
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = true
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = true
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			acmLockToSearch {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
		}
	}
	searchModes {
		stateInit:t = "init"
		transitions {
			initToPulse {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "pulse"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setPulseStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setPulseSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setPulseBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setPulseAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setMtiAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
				}
			}
			pulseToMti {
				stateFrom:t = "pulse"
				command:t = "modeSwitch"
				stateTo:t = "mti"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMtiStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMtiSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setMtiBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setMtiAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setPulseAcmLockParams"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			mtiToPulse {
				stateFrom:t = "mti"
				command:t = "modeSwitch"
				stateTo:t = "pulse"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setPulseStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setPulseSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setPulseBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setPulseAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setMtiAcmLockParams"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	bvrLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	acmLockModes {
		stateInit:t = "init"
		transitions {
			init {
				event:t = "fsmActivate"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			primaryToPrimaryStandby {
				stateFrom:t = "primary"
				event:t = "targetDetected"
				stateTo:t = "primaryStandby"
			}
			secondaryToSecondaryStandby {
				stateFrom:t = "secondary"
				event:t = "targetDetected"
				stateTo:t = "secondaryStandby"
			}
			primaryStandbyToPrimary {
				stateFrom:t = "primaryStandby"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			secondaryStandbyToSecondary {
				stateFrom:t = "secondaryStandby"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "secondary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
					}
				}
			}
			primaryToSecondary {
				stateFrom:t = "primary"
				command:t = "modeSwitch"
				stateTo:t = "secondary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
					}
				}
			}
			secondaryToPrimary {
				stateFrom:t = "secondary"
				command:t = "modeSwitch"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "init"
		actionsTemplates {
			setMtiTrack {
				setTransiver {
					transiver:t = "mti"
				}
				setSignal {
					signal:t = "mtiTrack"
				}
			}
			setPulseTrack {
				setTransiver {
					transiver:t = "pulse"
				}
				setSignal {
					signal:t = "pulseTrack"
				}
			}
			track {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			extrapolate {
				extrapolateTargetsOfInterest {

				}
				clearTargetsOfInterest {
					timeOut:r = 3
					dirRateLim:r = 1
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
		}
		transitions {
			start {
				event:t = "fsmActivate"
				stateTo:t = "mti"
				actions {
					setMtiTrack {

					}
					setModeName {
						name:t = "MTI track"
					}
				}
			}
			tryDetectMti {
				stateFrom:t = "mtiTry"
				event:t = "update"
				actions {
					setMtiTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			pulseOkTryDetectMti {
				stateFrom:t = "pulseOkMtiTry"
				event:t = "update"
				actions {
					setMtiTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setPulseTrack {

					}
				}
			}
			tryDetectPulse {
				stateFrom:t = "pulseTry"
				event:t = "update"
				actions {
					setPulseTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setMtiTrack {

					}
				}
			}
			detect {
				stateFrom:t = "mti"
				stateFrom:t = "pulse"
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			trackMti {
				stateFrom:t = "mti"
				event:t = "targetDetected"
				actions {
					track {

					}
				}
			}
			startTrackMti {
				stateFrom:t = "mtiTry"
				stateFrom:t = "pulseOkMtiTry"
				event:t = "targetDetected"
				stateTo:t = "mti"
				actions {
					setMtiTrack {

					}
					track {

					}
					setModeName {
						name:t = "MTI track"
					}
				}
			}
			trackPulse {
				stateFrom:t = "pulse"
				event:t = "targetDetected"
				stateTo:t = "pulseOkMtiTry"
				actions {
					track {

					}
				}
			}
			startTrackPulse {
				stateFrom:t = "pulseTry"
				event:t = "targetDetected"
				stateTo:t = "pulse"
				actions {
					setPulseTrack {

					}
					track {

					}
					setModeName {
						name:t = "track"
					}
				}
			}
			mtiToPulse {
				stateFrom:t = "mti"
				stateFrom:t = "mtiTry"
				event:t = "targetNotDetected"
				stateTo:t = "pulseTry"
				actions {
					extrapolate {

					}
				}
			}
			backToPulse {
				stateFrom:t = "pulseOkMtiTry"
				event:t = "targetNotDetected"
				stateTo:t = "pulseTry"
				actions {
					extrapolate {

					}
				}
			}
			pulseToMti {
				stateFrom:t = "pulse"
				event:t = "targetNotDetected"
				stateTo:t = "mtiTry"
				actions {
					extrapolate {

					}
				}
			}
			pulseTryToMti {
				stateFrom:t = "pulseTry"
				event:t = "targetNotDetected"
				stateTo:t = "mtiTry"
				actions {
					extrapolate {

					}
					setModeName {
						name:t = "track memory"
					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
}