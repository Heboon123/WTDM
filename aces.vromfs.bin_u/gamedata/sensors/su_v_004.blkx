type:t = "radar"
name:t = "V004"
showMissileLaunchZone:b = true
showMissileDgftLaunchZone:b = true
canMoveCamera:b = true
weaponTargetsMax:i = 4
launchedMissilesPredictedPositionsMax:i = 4
showMissileAimLead:b = true
transivers {
	mprf {
		sideLobesAttenuation:r = -20
		power:r = 1000
		band:i = 8
		rcs:r = 3
		range:r = 120000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			azimuth {
				angleHalfSens:r = 1.8
				sideLobesSensitivity:r = -35
			}
			elevation {
				angleHalfSens:r = 2.7
				sideLobesSensitivity:r = -35
			}
		}
	}
	hprf {
		sideLobesAttenuation:r = -20
		power:r = 1000
		band:i = 8
		rcs:r = 3
		range:r = 140000
		rangeMax:r = 170000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			azimuth {
				angleHalfSens:r = 1.8
				sideLobesSensitivity:r = -35
			}
			elevation {
				angleHalfSens:r = 2.7
				sideLobesSensitivity:r = -35
			}
		}
	}
	GTM {
		sideLobesAttenuation:r = -20
		power:r = 1000
		band:i = 8
		rcs:r = 40
		range:r = 30000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			azimuth {
				angleHalfSens:r = 1.8
				sideLobesSensitivity:r = -50
			}
			elevation {
				angleHalfSens:r = 2.7
				sideLobesSensitivity:r = -50
			}
		}
	}
}
illuminationTransmitter {
	power:r = 200
	antenna {
		angleHalfSens:r = 10
		sideLobesSensitivity:r = -30
	}
}
scanPatterns {
	searchAutoNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 0.92329437
		width:r = 15
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
		preciseMinor:b = true
	}
	searchAutoMedium {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 1.8465887
		width:r = 30
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
		preciseMinor:b = true
	}
	searchAutoWide {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 3.6931775
		width:r = 30
		barHeight:r = 2.5
		barsCount:i = 8
		rowMajor:b = true
		preciseMinor:b = true
	}
	fastTws {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 0.02
		width:r = 60
		barHeight:r = 2.5
		barsCount:i = 48
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	bvrLockSearch {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 0.1
		width:r = 2
		barHeight:r = 2.5
		barsCount:i = 6
		rowMajor:b = true
		indicate:b = true
	}
	bvrLockTws {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 60
		period:r = 0.1
		width:r = 2
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = true
		indicate:b = true
	}
	verticalLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 0.2
		width:r = 25
		barHeight:r = 1.5
		barsCount:i = 4
		rowMajor:b = false
		centerElevation:r = 12.5
		indicate:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 0.1
		width:r = 1.5
		indicate:b = true
	}
	hudLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 0.1
		width:r = 10
		barHeight:r = 1.5
		barsCount:i = 8
		rowMajor:b = true
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
	}
}
signals {
	track:b = true
	mprfSearch {
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		targetId:b = true
		mainBeamNotchWidth:r = 100
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 100000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 38
		}
	}
	hprfSearch {
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		targetId:b = true
		mainBeamDopplerSpeed:b = true
		distance {
			presents:b = true
			minValue:r = 9000
			maxValue:r = 100000
			width:r = 3000
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 50
			maxValue:r = 1200
			signalWidthMin:r = 5
			width:r = 150
		}
	}
	mprfTrack {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		targetId:b = true
		mainBeamNotchWidth:r = 40
		mainBeamNotchMaxElevation:r = 3.5
		track:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 200000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	hprfTrack {
		rangeFinder:b = true
		dopplerSpeedFinder:b = true
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		targetId:b = true
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 200000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -1200
			maxValue:r = 1200
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	acmLock {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		mainBeamNotchWidth:r = 40
		distance {
			presents:b = true
			minValue:r = 250
			maxValue:r = 200000
			width:r = 250
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	acmTrack {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		targetId:b = true
		mainBeamNotchWidth:r = 40
		mainBeamNotchMaxElevation:r = 3.5
		track:b = true
		distance {
			presents:b = true
			minValue:r = 250
			maxValue:r = 20000
			width:r = 250
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	GTMSearch {
		groundClutter:b = false
		aircraftAsTarget:b = false
		groundVehiclesAsTarget:b = true
		angularAccuracy:r = 0
		distanceAccuracy:r = 1
		absDopplerSpeed:b = true
		mainBeamDopplerSpeed:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 200000
			width:r = 15
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 2.5
			maxValue:r = 1000
			signalWidthMin:r = 2.5
			width:r = 0
		}
	}
	GTMTrack {
		groundClutter:b = false
		aircraftAsTarget:b = false
		groundVehiclesAsTarget:b = true
		angularAccuracy:r = 0
		distanceAccuracy:r = 1
		absDopplerSpeed:b = true
		mainBeamDopplerSpeed:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 200000
			width:r = 15
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 1.5
			maxValue:r = 1000
			signalWidthMin:r = 2.5
			width:r = 0
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchAutoMedium"
		scanPattern2:t = "searchAutoWide"
		scanPattern3:t = "searchAutoNarrow"
	}
	tws {
		scanPattern1:t = "searchAutoMedium"
		scanPattern2:t = "searchAutoWide"
		scanPattern3:t = "searchAutoNarrow"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
		scanPattern2:t = "verticalLock"
		scanPattern3:t = "hudLock"
	}
}
scopeRangeSets {
	common {
		range1:r = 40000
		range2:r = 100000
		range3:r = 200000
		range4:r = 20000
	}
	gtm {
		range1:r = 20000
		range2:r = 40000
		range3:r = 100000
		range4:r = 200000
	}
	acm {
		range1:r = 20000
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -60, 60
					azimuthWidth:r = 5
					elevationLimits:p2 = -60, 60
					distanceRange:p2 = 0, 200000
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScopeRangeSet {
					scopeRangeSet:t = "common"
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
			}
			setBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 10000
					width:r = 20000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "acmLock"
				}
				setModeName {
					name:t = "PD ACM"
				}
				setDesignationSourceType {
					sourceType:t = "radar"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setSearchStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
			}
			setTwsStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			setTwsSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = true
					targetUnderCueScanPattern:t = "fastTws"
				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
				setFsmActive {
					fsm:t = "tws"
					active:b = true
				}
			}
			resetTwsMode {
				clearTargets {

				}
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "tws"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			designatedTargetTws {
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
					sensorIndex:i = 0
				}
			}
			setTwsBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 300
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 20
				}
				setScanPattern {
					scanPattern:t = "bvrLockTws"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "TWS acquisition"
				}
			}
			setMprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD standby"
				}
			}
			setHprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "PD HDN standby"
				}
			}
			setMprfTwsStandbyMode {
				setTwsStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS standby"
				}
			}
			setHprfTwsStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "PD HDN standby"
				}
			}
			setGtmStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "gtm"
				}
				setModeName {
					name:t = "GTM standby"
				}
				setDesignationSourceType {
					sourceType:t = "radarSs"
				}
			}
			setGtmTwsStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "gtm"
				}
				setModeName {
					name:t = "GTM standby"
				}
				setDesignationSourceType {
					sourceType:t = "radarSs"
				}
			}
			setMprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD search"
				}
			}
			setHprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "PD HDN search"
				}
			}
			setMprfTwsSearchMode {
				setTwsSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS search"
				}
			}
			setHprfTwsSearchMode {
				setTwsSearchModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "TWS HDN search"
				}
			}
			setGtmSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "gtm"
				}
				setModeName {
					name:t = "GTM search"
				}
				setDesignationSourceType {
					sourceType:t = "radarSs"
				}
			}
			setGtmTwsSearchMode {
				setTwsSearchModeCommon {

				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "gtm"
				}
				setModeName {
					name:t = "TWS GTM search"
				}
				setDesignationSourceType {
					sourceType:t = "radarSs"
				}
			}
			setMprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD acquisition"
				}
			}
			setHprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD HDN acquisition"
				}
			}
			setGtmTwsBvrLockModeCommon {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMTrack"
				}
			}
			resetGtmBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
			}
			setGtmBvrTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setModeName {
					name:t = "GTM track"
				}
				setFsmActive {
					fsm:t = "gtmTrack"
					active:b = true
				}
				setTransiver {
					transiver:t = "GTM"
				}
				setSignal {
					signal:t = "GTMTrack"
				}
			}
			resetGtmBvrTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "gtmTrack"
					active:b = false
				}
			}
			setGtmBvrLockMode {
				setGtmTwsBvrLockModeCommon {

				}
				setModeName {
					name:t = "GTM acquisition"
				}
			}
			setGtmTwsBvrLockMode {
				setGtmTwsBvrLockModeCommon {

				}
				setModeName {
					name:t = "TWS GTM acquisition"
				}
			}
			setAcmTrackMode {
				setTrackMode {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "acmTrack"
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmLockToSearch {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
		}
	}
	searchModes {
		stateInit:t = "init"
		transitions {
			initToMprf {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setAcmTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
				}
			}
			mprfToMprfTws {
				stateFrom:t = "mprf"
				command:t = "modeSwitch"
				stateTo:t = "mprfTws"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfTwsStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfTwsSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setTwsBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetTwsMode"
					}
				}
			}
			mprfTwsToHprf {
				stateFrom:t = "mprfTws"
				command:t = "modeSwitch"
				stateTo:t = "hprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setHprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setHprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			hprfToHprfTws {
				stateFrom:t = "hprf"
				command:t = "modeSwitch"
				stateTo:t = "hprfTws"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setHprfTwsStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setHprfTwsSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setTwsBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetTwsMode"
					}
				}
			}
			hprfTwsToGtm {
				stateFrom:t = "hprfTws"
				command:t = "modeSwitch"
				stateTo:t = "gtm"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setGtmStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setGtmSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setGtmBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetGtmBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setGtmBvrTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetGtmBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			gtmToGtmTws {
				stateFrom:t = "gtm"
				command:t = "modeSwitch"
				stateTo:t = "gtmTws"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setGtmTwsStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setGtmTwsSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setGtmTwsBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetGtmBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setGtmBvrTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetGtmBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetTwsMode"
					}
				}
			}
			gtmTwsToMprf {
				stateFrom:t = "gtmTws"
				command:t = "modeSwitch"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setDesignationSourceType {
						sourceType:t = "radar"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	tws {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				stateFrom:t = "track"
				stateTo:t = "search"
				actions {
					scan {

					}
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 4
					}
					setCueToActiveTargetOfInterest {

					}
					update {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				stateFrom:t = "search"
				actions {
					updateTargetOfInterest {
						limit:i = 10
						posGateTimeInitial:p2 = 2, 4
						posGateRangeInitial:r = 1500
						posGateMaxTime:r = 2
						posGateRange:p2 = 0, 1000
						dopplerSpeedGateRange:p2 = 0, 1600
						dopplerSpeedGateMaxTime:r = 8
					}
					updateActiveDetectedTarget {

					}
					setCueToActiveTargetOfInterest {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			scanTrack {
				stateFrom:t = "search"
				event:t = "update"
				stateTo:t = "track"
				actions {
					scan {
						scanPattern:t = "fastTws"
					}
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 4
					}
					setCueToActiveTargetOfInterest {

					}
				}
			}
			addTargetTrack {
				stateFrom:t = "track"
				event:t = "targetDetected"
				actions {
					updateTargetOfInterest {
						limit:i = 10
						onlyExisting:b = true
						posGateTimeInitial:p2 = 2, 4
						posGateRangeInitial:r = 1500
						posGateMaxTime:r = 2
						posGateRange:p2 = 0, 1000
						dopplerSpeedGateMaxTime:r = 8
						dopplerSpeedGateRange:p2 = 0, 1600
					}
					updateActiveDetectedTarget {

					}
					setCueToActiveTargetOfInterest {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	bvrLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	lock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "init"
		actionsTemplates {
			setMprfTrack {
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfTrack"
				}
			}
			setHprfTrack {
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfTrack"
				}
			}
			track {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					dopplerSpeedFilter {
						rateLim:p2 = 200, 200
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			extrapolate {
				extrapolateTargetsOfInterest {

				}
				clearTargetsOfInterest {
					timeOut:r = 3
					dirRateLim:r = 1
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
		}
		transitions {
			start {
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			tryDetectMprf {
				stateFrom:t = "mprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			hprfOkTryDetectMprf {
				stateFrom:t = "hprfOkMprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setHprfTrack {

					}
				}
			}
			tryDetectHprf {
				stateFrom:t = "hprfTry"
				event:t = "update"
				actions {
					setHprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setMprfTrack {

					}
				}
			}
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			trackMprf {
				stateFrom:t = "mprf"
				event:t = "targetDetected"
				actions {
					track {

					}
				}
			}
			startTrackMprf {
				stateFrom:t = "mprfTry"
				stateFrom:t = "hprfOkMprfTry"
				event:t = "targetDetected"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					track {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			trackHprf {
				stateFrom:t = "hprf"
				event:t = "targetDetected"
				stateTo:t = "hprfOkMprfTry"
				actions {
					track {

					}
				}
			}
			trackHprf {
				stateFrom:t = "hprf"
				event:t = "targetDetected"
				stateTo:t = "mprfTry"
				actions {
					track {

					}
					setMprfTrack {

					}
				}
			}
			startTrackHprf {
				stateFrom:t = "hprfTry"
				event:t = "targetDetected"
				stateTo:t = "hprf"
				actions {
					setHprfTrack {

					}
					track {

					}
					setModeName {
						name:t = "PD HDN track"
					}
				}
			}
			mprfToHprf {
				stateFrom:t = "mprf"
				stateFrom:t = "mprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
				}
			}
			backToHprf {
				stateFrom:t = "hprfOkMprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
				}
			}
			hprfToMprf {
				stateFrom:t = "hprf"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
				}
			}
			hprfTryToMprf {
				stateFrom:t = "hprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
					setModeName {
						name:t = "track memory"
					}
				}
			}
		}
	}
	gtmTrack {
		stateInit:t = "track"
		transitions {
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			track {
				event:t = "targetDetected"
				actions {
					updateActiveTargetOfInterest {
						dirFilter {
							rateLim:p2 = 0.78, 0.78
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
						distFilter {
							accelLim:p2 = 150, 150
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			extrapolate {
				event:t = "targetNotDetected"
				actions {
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 3
						dirRateLim:r = 1
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
}
targetTypeId {
	name:t = "hud/mig_15"
	targetType:t = "mig-15"
	targetType:t = "mig-15_ns23"
	targetType:t = "mig-15bis_ns23"
	targetType:t = "mig-15bis_nr23_german"
	targetType:t = "mig-15bis_nr23_hungary"
	targetType:t = "mig-15bis_nr23_china"
	targetType:t = "mig-15bis_ish"
}
targetTypeId {
	name:t = "hud/yak_38"
	targetType:t = "yak-38"
	targetType:t = "yak-38m"
}
targetTypeId {
	name:t = "hud/yak_141"
	targetType:t = "yak_141"
}
targetTypeId {
	name:t = "hud/su_17"
	targetType:t = "su_17m2"
	targetType:t = "su_17m4"
	targetType:t = "su_22m3"
	targetType:t = "su_22m3_hungary"
	targetType:t = "su_22um3k"
	targetType:t = "su_22m4"
	targetType:t = "su_22m4_de_wtd61"
}
targetTypeId {
	name:t = "hud/su_24"
	targetType:t = "su_24m"
}
targetTypeId {
	name:t = "hud/su_25"
	targetType:t = "su_25"
	targetType:t = "su_25k"
	targetType:t = "su_25t"
	targetType:t = "su_25tm"
	targetType:t = "su_25_558arz"
	targetType:t = "su_25sm3"
}
targetTypeId {
	name:t = "hud/su_27"
	targetType:t = "su_27"
	targetType:t = "su_27sm"
	targetType:t = "su_33"
	targetType:t = "su_34"
	targetType:t = "su_30sm"
	targetType:t = "j_11"
	targetType:t = "j_11a"
	targetType:t = "j_11b"
}
targetTypeId {
	name:t = "hud/mig_21"
	targetType:t = "mig-21_bis_lazur"
	targetType:t = "mig-21_bison"
	targetType:t = "mig-21_f13"
	targetType:t = "mig-21_smt"
	targetType:t = "mig-21_bis"
	targetType:t = "mig-21_bis_sau"
	targetType:t = "mig-21_bis_sau_hungary"
	targetType:t = "mig-21_mf"
	targetType:t = "mig-21_mf_hungary"
	targetType:t = "mig-21_sps_k"
	targetType:t = "mig-21_pfm"
	targetType:t = "mig-21_s"
	targetType:t = "mig_21_bis_finland"
	targetType:t = "j_7_mk2"
	targetType:t = "j_7d"
	targetType:t = "j_7e"
}
targetTypeId {
	name:t = "hud/mig_23"
	targetType:t = "mig_23m"
	targetType:t = "mig_23bn"
	targetType:t = "mig_23mf_germany"
	targetType:t = "mig_23mf_hungary"
	targetType:t = "mig_23ml"
	targetType:t = "mig_23mld"
	targetType:t = "mig_23mla"
	targetType:t = "mig_27m"
	targetType:t = "mig_27k"
}
targetTypeId {
	name:t = "hud/mig_29"
	targetType:t = "mig_29_9_13"
	targetType:t = "mig_29_9_12g"
	targetType:t = "mig_29_9_12_germany"
	targetType:t = "mig_29_9_12b_hungary"
	targetType:t = "mig_29smt_9_19"
	targetType:t = "mig_29smt_9_19_missile_test"
	targetType:t = "mig_29_9_12_sniper"
}
targetTypeId {
	name:t = "hud/f_4"
	targetType:t = "f-4c"
	targetType:t = "f-4e"
	targetType:t = "f-4j"
	targetType:t = "f-4s"
	targetType:t = "f-4ej"
	targetType:t = "f-4ej_adtw"
	targetType:t = "f-4ej_kai"
	targetType:t = "f-4m_fgr2"
	targetType:t = "f-4jk"
	targetType:t = "f-4k"
	targetType:t = "f-4f"
	targetType:t = "f-4f_late"
	targetType:t = "f-4f_kws_lv"
	targetType:t = "f-4e_iaf"
	targetType:t = "f-4e_kurnass_2000"
}
targetTypeId {
	name:t = "hud/f_5"
	targetType:t = "f-5a"
	targetType:t = "f-5a_china"
	targetType:t = "f-5ag_norway"
	targetType:t = "f-5e_aidc"
	targetType:t = "f-5e_fcu_thailand"
	targetType:t = "f-5a_thailand"
	targetType:t = "f-5t_thailand"
	targetType:t = "f-5c"
	targetType:t = "f-5e"
	targetType:t = "f-5e_switzerland"
	targetType:t = "nf_5a_netherlands"
	targetType:t = "f-5th_thailand"
}
targetTypeId {
	name:t = "hud/a_7"
	targetType:t = "a_7d"
	targetType:t = "a_7e"
	targetType:t = "a_7e_thailand"
	targetType:t = "a_7k"
}
targetTypeId {
	name:t = "hud/f_8"
	targetType:t = "f-8e"
	targetType:t = "f-8e_fn"
	targetType:t = "f8u-2"
}
targetTypeId {
	name:t = "hud/a_10"
	targetType:t = "a_10a_early"
	targetType:t = "a_10a_late"
	targetType:t = "a_10c"
}
targetTypeId {
	name:t = "hud/f_104"
	targetType:t = "f-104a"
	targetType:t = "f-104c"
	targetType:t = "f-104g"
	targetType:t = "f-104a_china"
	targetType:t = "f-104g_china"
	targetType:t = "f-104g_italy"
	targetType:t = "f-104j"
	targetType:t = "f-104s"
	targetType:t = "f-104s_cb"
	targetType:t = "f-104s_asa"
	targetType:t = "f-104g_belgium"
}
targetTypeId {
	name:t = "hud/f_105"
	targetType:t = "f-105d"
}
targetTypeId {
	name:t = "hud/f_111"
	targetType:t = "f_111a"
	targetType:t = "f_111f"
	targetType:t = "f_111c_raaf"
}
targetTypeId {
	name:t = "hud/f_14"
	targetType:t = "f_14a_early"
	targetType:t = "f_14a_iriaf"
	targetType:t = "f_14b"
}
targetTypeId {
	name:t = "hud/f_15"
	targetType:t = "f_15a"
	targetType:t = "f_15a_iaf"
	targetType:t = "f_15j"
	targetType:t = "f_15j_kai"
	targetType:t = "f_15c_msip2"
	targetType:t = "f_15c_baz_msip"
	targetType:t = "f_15e"
	targetType:t = "f_15i_raam"
}
targetTypeId {
	name:t = "hud/f_16"
	targetType:t = "f_16a_block_10"
	targetType:t = "f_16a_block_15_adf"
	targetType:t = "f_16a_block_15_adf_italy"
	targetType:t = "f_16a_block_15_ocu_thailand"
	targetType:t = "f_16a_block_10_iaf"
	targetType:t = "f_16a_block_10_netz_mod"
	targetType:t = "f_16a_block_15_belgium"
	targetType:t = "f_16am_block_15_mlu_belgium"
	targetType:t = "f_16c_block_40_barak_2"
	targetType:t = "f_16d_block_40_barak_2"
	targetType:t = "f_16d_block_40_barak_2_missile_test"
	targetType:t = "f_16a_block_20_mlu"
	targetType:t = "f_16aj"
	targetType:t = "f_16c_block_50"
	targetType:t = "f_16c_block_50_missile_test"
	targetType:t = "f_2a"
	targetType:t = "f_2a_adtw"
	targetType:t = "f_16i_sufa"
	targetType:t = "f_16a_block_15_ocu_belgium"
}
targetTypeId {
	name:t = "hud/f_18"
	targetType:t = "fa_18a"
	targetType:t = "fa_18c_early"
	targetType:t = "fa_18c_late"
	targetType:t = "fa_18c_finland"
	targetType:t = "fa_18c_switzerland"
	targetType:t = "fa_18c_late_switzerland"
	targetType:t = "fa_18c_mlu_2_finland"
	targetType:t = "fa_18a_raaf"
	targetType:t = "fa_18a_hug_2_raaf"
	targetType:t = "cf_188a_canada"
}
targetTypeId {
	name:t = "hud/f_20"
	targetType:t = "f_20a"
}
targetTypeId {
	name:t = "hud/harrier"
	targetType:t = "harrier_gr1"
	targetType:t = "harrier_gr3"
	targetType:t = "harrier_frs1_early"
	targetType:t = "harrier_frs1"
	targetType:t = "harrier_gr7"
	targetType:t = "harrier_t10"
	targetType:t = "sea_harrier_fa2"
	targetType:t = "av_8a"
	targetType:t = "av_8b_na"
	targetType:t = "av_8b_plus"
	targetType:t = "av_8b_plus_italy"
	targetType:t = "av_8c"
	targetType:t = "av_8s_thailand"
	targetType:t = "av_8s_late_thailand"
}
targetTypeId {
	name:t = "hud/jaguar"
	targetType:t = "jaguar_is"
	targetType:t = "jaguar_gr1a"
	targetType:t = "jaguar_gr1"
	targetType:t = "jaguar_e"
	targetType:t = "jaguar_a"
	targetType:t = "jaguar_a_killstreak"
	targetType:t = "jaguar_a_germany_killstreak"
	targetType:t = "jaguar_a_italy_killstreak"
	targetType:t = "jaguar_a_japan_killstreak"
	targetType:t = "jaguar_a_sweden_killstreak"
	targetType:t = "jaguar_a_uk_killstreak"
	targetType:t = "jaguar_a_usa_killstreak"
	targetType:t = "jaguar_a_iaf_killstreak"
}
targetTypeId {
	name:t = "hud/tornado"
	targetType:t = "tornado_gr1"
	targetType:t = "tornado_gr4"
	targetType:t = "tornado_f3"
	targetType:t = "tornado_f3_late"
	targetType:t = "tornado_ids_de_mfg"
	targetType:t = "tornado_ids_de_assta1"
	targetType:t = "tornado_ids_de_wtd61"
	targetType:t = "tornado_ids_it"
	targetType:t = "tornado_ids_it_mod95"
	targetType:t = "tornado_ids_it_ret8"
	targetType:t = "tornado_adv"
}
targetTypeId {
	name:t = "hud/buccanier"
	targetType:t = "buccaneer_s1"
	targetType:t = "buccaneer_s2"
	targetType:t = "buccaneer_s2b"
}
targetTypeId {
	name:t = "hud/typhoon"
	targetType:t = "ef_2000_fgr4"
	targetType:t = "ef_2000a"
	targetType:t = "ef_2000_block_10"
}
targetTypeId {
	name:t = "hud/q_5"
	targetType:t = "q_5_early"
	targetType:t = "q_5a"
	targetType:t = "q_5l"
	targetType:t = "a_5c"
}
targetTypeId {
	name:t = "hud/jh_7"
	targetType:t = "jh_7a"
}
targetTypeId {
	name:t = "hud/j_8"
	targetType:t = "j_8b"
	targetType:t = "j_8f"
	targetType:t = "j_8f_missile_test"
}
targetTypeId {
	name:t = "hud/j_10"
	targetType:t = "j_10a"
}
targetTypeId {
	name:t = "hud/jf_17"
	targetType:t = "jf_17"
}
targetTypeId {
	name:t = "hud/amx"
	targetType:t = "amx_a_1a_brazil"
	targetType:t = "amx"
}
targetTypeId {
	name:t = "hud/mirage_f1"
	targetType:t = "mirage_f1c_200"
	targetType:t = "mirage_f1c"
	targetType:t = "mirage_f1ct"
}
targetTypeId {
	name:t = "hud/mirage_3"
	targetType:t = "mirage_3c"
	targetType:t = "mirage_3cj"
	targetType:t = "mirage_3e"
	targetType:t = "mirage_milan"
	targetType:t = "mirage_5ba"
	targetType:t = "kfir_canard"
	targetType:t = "kfir_c2"
	targetType:t = "kfir_c7"
	targetType:t = "kfir_c10_colombia"
	targetType:t = "mirage_3s_c70_switzerland"
}
targetTypeId {
	name:t = "hud/mirage_2000"
	targetType:t = "mirage_2000_5f"
	targetType:t = "mirage_2000_5f_missile_test"
	targetType:t = "mirage_2000_5ei"
	targetType:t = "mirage_2000c_s4"
	targetType:t = "mirage_2000c_s5"
	targetType:t = "mirage_2000d_r1"
	targetType:t = "mirage_2000d_rmv"
}
targetTypeId {
	name:t = "hud/mirage_4000"
	targetType:t = "mirage_4000"
}
targetTypeId {
	name:t = "hud/rafale"
	targetType:t = "rafale_c_f3"
}
targetTypeId {
	name:t = "hud/draken"
	targetType:t = "saab_j35xs"
	targetType:t = "saab_j35d"
	targetType:t = "saab_j35a"
	targetType:t = "saab_f35_wdns"
}
targetTypeId {
	name:t = "hud/viggen"
	targetType:t = "saab_aj37"
	targetType:t = "saab_ja37"
	targetType:t = "saab_ja37d"
	targetType:t = "saab_ja37di"
	targetType:t = "saab_ja37di_f21"
	targetType:t = "saab_ajs37"
}
targetTypeId {
	name:t = "hud/gripen"
	targetType:t = "saab_jas39a"
	targetType:t = "saab_jas39c_south_africa"
	targetType:t = "saab_jas39c_south_africa_missile_test"
	targetType:t = "saab_jas39c_hungary"
	targetType:t = "saab_jas39c_thailand"
	targetType:t = "saab_jas39c"
}
targetTypeId {
	name:t = "hud/single prop"
	targetPropulsion {
		type:t = "propellers"
		num:i = 1
	}
}
targetTypeId {
	name:t = "hud/multi prop"
	targetPropulsion {
		type:t = "propellers"
		num:i = 2
	}
	targetPropulsion {
		type:t = "propellers"
		num:i = 3
	}
	targetPropulsion {
		type:t = "propellers"
		num:i = 4
	}
}
targetTypeId {
	name:t = "hud/single jet"
	targetPropulsion {
		type:t = "jet"
		num:i = 1
	}
}
targetTypeId {
	name:t = "hud/multi jet"
	targetPropulsion {
		type:t = "jet"
		num:i = 2
	}
	targetPropulsion {
		type:t = "jet"
		num:i = 3
	}
	targetPropulsion {
		type:t = "jet"
		num:i = 4
	}
}
targetTypeId {
	name:t = "hud/helicopter"
	targetPropulsion {
		type:t = "rotors"
	}
}
targetTypeId {
	name:t = "hud/rocket"
	targetPropulsion {
		type:t = "rocket"
	}
}
targetTypeId {
	name:t = "hud/small"
	sizeRange:p2 = 0, 5
}
targetTypeId {
	name:t = "hud/medium"
	sizeRange:p2 = 5, 25
}
targetTypeId {
	name:t = "hud/large"
	sizeRange:p2 = 25, 500
}