type:t = "radar"
name:t = "MA-1"
showMissileLaunchZone:b = true
transivers {
	radar {
		sideLobesAttenuation:r = -22
		pulsePower:r = 40000
		pulseWidth:r = 0.0000005
		prf:r = 1000
		band:i = 8
		rcs:r = 3
		range:r = 45000
		rangeMax:r = 90000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 5
			sideLobesSensitivity:r = -28
		}
	}
	irst {
		power:r = 50
		band:i = 1
		rcs:r = 24000
		range:r = 16000
		range1:r = 3500
		rangeMax:r = 20000
		visibilityType:t = "infraRed"
		antenna {
			angleHalfSens:r = 5
			sideLobesSensitivity:r = -120
		}
	}
}
scanPatterns {
	searchWideRadar {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 7.06
		width:r = 53
		barHeight:r = 4
		barsCount:i = 4
		rowMajor:b = true
		barsOneWay:b = true
	}
	searchMediumRadar {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 4
		width:r = 30
		barHeight:r = 4
		barsCount:i = 4
		rowMajor:b = true
		barsOneWay:b = true
	}
	searchNarrowRadar {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 2
		width:r = 30
		barHeight:r = 4
		barsCount:i = 2
		rowMajor:b = true
		barsOneWay:b = true
	}
	bvrLockSearchRadar {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 0.5
		width:r = 8
		barHeight:r = 3.5
		barsCount:i = 2
		rowMajor:b = false
		indicate:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		period:r = 1
		width:r = 1.2
		indicate:b = true
	}
	trackRadar {
		type:t = "no"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
	}
	searchIrst {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 4
		width:r = 53
		barHeight:r = 5
		barsCount:i = 4
		rowMajor:b = true
		barsOneWay:b = false
	}
	bvrLockSearchIrst {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		rollStabLimit:r = 60
		pitchStabLimit:r = 45
		period:r = 0.3
		width:r = 5
		barHeight:r = 2
		barsCount:i = 4
		rowMajor:b = true
		barsOneWay:b = false
		indicate:b = true
	}
	trackIrst {
		type:t = "no"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
	}
	hmdLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		period:r = 0.2
		width:r = 0.75
		barHeight:r = 1.5
		barsCount:i = 2
		rowMajor:b = true
		indicate:b = true
		hmd:b = true
	}
	hmdTrack {
		type:t = "no"
		azimuthLimits:p2 = -53, 53
		elevationLimits:p2 = -30, 30
		hmd:b = true
	}
}
signals {
	searchRadar {
		dynamicRange:p2 = 40, 10
		groundClutter:b = true
		aircraftAsTarget:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 75000
			width:r = 300
		}
	}
	trackRadar {
		dynamicRange:p2 = 40, 10
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.06
		distanceAccuracy:r = 15
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 75000
			width:r = 300
		}
	}
	irst {
		rangeFinder:b = false
		groundClutter:b = false
		showBScope:b = false
		showCScope:b = true
	}
}
scanPatternSets {
	radarSearch {
		scanPattern1:t = "searchMediumRadar"
		scanPattern2:t = "searchWideRadar"
		scanPattern3:t = "searchNarrowRadar"
	}
	irstSearch {
		scanPattern1:t = "searchIrst"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
	}
	hmdLock {
		scanPattern1:t = "hmdLock"
	}
}
scopeRangeSets {
	searchRadar {
		range1:r = 18500
		range2:r = 29600
		range3:r = 74000
		range4:r = 148000
	}
	acm {
		range1:r = 18500
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {

				}
				setFsmActive {
					fsm:t = "sensorTypes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "sensorTypes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "sensorTypes"
					active:b = false
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "sensorTypes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
				}
				setRelSpeedGatePos {
					source:t = "constRange"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setDistGatePos {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "acquisition"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "lock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "trackRadar"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setIllumination {
					illumination:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setIllumination {
					illumination:b = false
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "searchRadar"
				}
				setModeName {
					name:t = "ACM"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setRadarStandbyMode {
				setStandbyModeCommon {

				}
				setTargetDesignationRange {
					azimuthRange:p2 = -53, 53
					elevationRange:p2 = -30, 30
					distanceRange:p2 = 0, 46000
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
				}
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "searchRadar"
				}
				setScanPatternSet {
					scanPatternSet:t = "radarSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "searchRadar"
				}
				setModeName {
					name:t = "standby"
				}
			}
			setIrstStandbyMode {
				setStandbyModeCommon {

				}
				setTargetDesignationRange {
					azimuthRange:p2 = -53, 53
					elevationRange:p2 = -30, 30
					distanceRange:p2 = 0, 10000
				}
				setTransiver {
					transiver:t = "irst"
				}
				setSignal {
					signal:t = "irst"
				}
				setScanPatternSet {
					scanPatternSet:t = "irstSearch"
				}
				setScopeRangeSet {

				}
				setModeName {
					name:t = "IRST standby"
				}
			}
			setRadarSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "searchRadar"
				}
				setScanPatternSet {
					scanPatternSet:t = "radarSearch"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "searchRadar"
				}
				setModeName {
					name:t = "search"
				}
			}
			setIrstSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "irst"
				}
				setSignal {
					signal:t = "irst"
				}
				setScanPatternSet {
					scanPatternSet:t = "irstSearch"
				}
				setScopeRangeSet {

				}
				setModeName {
					name:t = "IRST search"
				}
			}
			setRadarBvrLockMode {
				setBvrLockModeCommon {

				}
				setScanPattern {
					scanPattern:t = "bvrLockSearchRadar"
				}
			}
			setIrstBvrLockMode {
				setBvrLockModeCommon {

				}
				setScanPattern {
					scanPattern:t = "bvrLockSearchIrst"
				}
			}
			setHmdStandbyMode {
				setEnabled {
					value:b = false
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "searchRadar"
				}
				setModeName {
					name:t = "HMD"
				}
			}
			resetHmdStandbyMode {
				resetStandbyMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			setHmdLockMode {
				setEnabled {
					value:b = true
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "searchRadar"
				}
				setModeName {
					name:t = "HMD"
				}
			}
			resetHmdLockMode {
				resetAcmLockMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			setHmdTrackMode {
				setTrackMode {

				}
				setScanPattern {
					scanPattern:t = "hmdTrack"
				}
			}
			resetHmdTrackMode {
				resetTrackMode {

				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			standbyToHmdStandby {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
				}
			}
			acmLockToHmdStandby {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdStandbyToSearch {
				stateFrom:t = "hmdStandby"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			hmdStandbyToStandby {
				stateFrom:t = "hmdStandby"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			hmdStandbyToHmdLock {
				stateFrom:t = "hmdStandby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
				}
			}
			hmdLockToHmdTrack {
				stateFrom:t = "hmdLock"
				event:t = "targetDetected"
				stateTo:t = "hmdTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
					}
				}
			}
			hmdLockToHmdStandby {
				stateFrom:t = "hmdLock"
				event:t = "scanFinished"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToHmdStandby {
				stateFrom:t = "hmdTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToStandby {
				stateFrom:t = "hmdTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateTrackMode {
				stateFrom:t = "bvrTrack"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "sensorTypes"
						name:t = "setTrackParams"
					}
				}
			}
		}
	}
	sensorTypes {
		stateInit:t = "init"
		actionsTemplates {
			setRadarTargetDesignationRange {
				setTargetDesignationRange {
					azimuthRange:p2 = -53, 53
					elevationRange:p2 = -30, 30
					distanceRange:p2 = 0, 46000
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
				}
			}
			setIrstTargetDesignationRange {
				setTargetDesignationRange {
					azimuthRange:p2 = -53, 53
					elevationRange:p2 = -30, 30
					distanceRange:p2 = 0, 10000
				}
			}
			setRadarTrackParams {
				setTransiver {
					transiver:t = "radar"
				}
				setSignal {
					signal:t = "trackRadar"
				}
				setScanPattern {
					scanPattern:t = "trackRadar"
				}
			}
			setIrstTrackParams {
				setTransiver {
					transiver:t = "irst"
				}
				setSignal {
					signal:t = "irst"
				}
				setScanPattern {
					scanPattern:t = "trackIrst"
				}
			}
		}
		transitions {
			initToRadar {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "radar"
				actions {
					setRadarTargetDesignationRange {

					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setRadarStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setRadarSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setRadarBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "sensorTypes"
						name:t = "setTrackParams"
						actionTemplateName:t = "setRadarTrackParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
						actionTemplateName:t = "setHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
						actionTemplateName:t = "resetHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
						actionTemplateName:t = "setHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
						actionTemplateName:t = "resetHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
						actionTemplateName:t = "setHmdTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
						actionTemplateName:t = "resetHmdTrackMode"
					}
				}
			}
			radarToIrst {
				stateFrom:t = "radar"
				command:t = "typeSwitch"
				stateTo:t = "irst"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setIrstStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setIrstSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setIrstBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "sensorTypes"
						name:t = "setTrackParams"
						actionTemplateName:t = "setIrstTrackParams"
					}
					setIrstTargetDesignationRange {

					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
				}
			}
			irstToRadar {
				stateFrom:t = "irst"
				command:t = "typeSwitch"
				stateTo:t = "radar"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setRadarStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setRadarSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setRadarBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "sensorTypes"
						name:t = "setTrackParams"
						actionTemplateName:t = "setRadarTrackParams"
					}
					setRadarTargetDesignationRange {

					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	lock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "track"
		transitions {
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			track {
				event:t = "targetDetected"
				actions {
					updateActiveTargetOfInterest {
						dirFilter {
							rateLim:p2 = 0.78, 0.78
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
						distFilter {
							accelLim:p2 = 150, 150
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			extrapolate {
				event:t = "targetNotDetected"
				actions {
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 3
						dirRateLim:r = 1
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			init {
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "sensorTypes"
						name:t = "setTrackParams"
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	helmetDesignation {
		stateInit:t = "helmetDesignation"
		actionsTemplates {
			designateHelmetTargetDir {
				designateHelmetTarget {
					self:b = true
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
			}
		}
		transitions {
			activate {
				event:t = "fsmActivate"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
			updateDesignation {
				event:t = "update"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
		}
	}
}