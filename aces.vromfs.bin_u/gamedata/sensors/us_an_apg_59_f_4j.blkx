type:t = "radar"
name:t = "AN/APG-59"
showMissileLaunchZone:b = true
transivers {
	lprf {
		sideLobesAttenuation:r = -20
		power:r = 400
		band:i = 8
		rcs:r = 5
		range:r = 70000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 3
			sideLobesSensitivity:r = -30
		}
	}
	hprf {
		sideLobesAttenuation:r = -20
		power:r = 400
		band:i = 8
		rcs:r = 5
		range:r = 90000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 3
			sideLobesSensitivity:r = -30
		}
	}
	hprfVelocity {
		sideLobesAttenuation:r = -20
		power:r = 400
		band:i = 8
		rcs:r = 5
		range:r = 90000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 3
			sideLobesSensitivity:r = -30
		}
	}
}
illuminationTransmitter {
	power:r = 200
	antenna {
		angleHalfSens:r = 12
		sideLobesSensitivity:r = -30
	}
}
scanPatterns {
	searchNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 1
		width:r = 15
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = true
	}
	searchWide3Bars {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 3
		width:r = 60
		barHeight:r = 2.67
		barsCount:i = 3
		rowMajor:b = true
	}
	searchWide1Bar {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 1
		width:r = 60
		barHeight:r = 3
		barsCount:i = 1
		rowMajor:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 1
		width:r = 1.75
		indicate:b = true
	}
	bvrLockSearch {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 0.5
		width:r = 8
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = false
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
	}
	hmdLock {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 1
		width:r = 1.75
		indicate:b = true
		hmd:b = true
	}
	hmdTrack {
		type:t = "no"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		hmd:b = true
	}
}
signals {
	lprfSearch {
		rangeFinder:b = true
		dopplerSpeedFinder:b = false
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 370000
			width:r = 200
		}
	}
	hprfVelocitySearch {
		rangeFinder:b = false
		dopplerSpeedFinder:b = true
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		zeroDopplerNotchWidth:r = 50
		mainBeamNotchWidth:r = 110
		dopplerSpeed {
			presents:b = true
			minValue:r = -150
			maxValue:r = 1500
			signalWidthMin:r = 2
			width:r = 105
		}
	}
	hprfSearch {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 370000
			width:r = 200
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -150
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 105
		}
	}
	lprfTrack {
		rangeFinder:b = true
		dopplerSpeedFinder:b = false
		dynamicRange:p2 = 40, 13
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.06
		distanceAccuracy:r = 15
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 92500
			width:r = 150
		}
	}
	hprfAcm {
		rangeFinder:b = true
		dopplerSpeedFinder:b = true
		dynamicRange:p2 = 40, 13
		groundClutter:b = true
		aircraftAsTarget:b = true
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		zeroDopplerNotchWidth:r = 50
		mainBeamNotchWidth:r = 110
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 92500
			width:r = 150
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -150
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 105
		}
	}
	hprfTrack {
		rangeFinder:b = true
		dopplerSpeedFinder:b = true
		dynamicRange:p2 = 40, 13
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.06
		distanceAccuracy:r = 15
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		zeroDopplerNotchWidth:r = 50
		mainBeamNotchWidth:r = 110
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 92500
			width:r = 150
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -150
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 105
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchWide3Bars"
		scanPattern2:t = "searchWide1Bar"
		scanPattern3:t = "searchNarrow"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
	}
	hmdLock {
		scanPattern1:t = "hmdLock"
	}
}
scopeRangeSets {
	common {
		range1:r = 46250
		range2:r = 92500
		range3:r = 185000
		range4:r = 370000
		range5:r = 9250
		range6:r = 18500
	}
	acm {
		range1:r = 18500
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -60, 60
					azmithWidth:r = 2.5
					elevationRange:p2 = -60, 60
					distanceRange:p2 = 0, 92500
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
					dopplerSpeedRange:p2 = -150, 2500
					dopplerSpeedWidth:r = 65
					dopplerSpeedRelWidthMin:r = 0.05
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScopeRangeSet {
					scopeRangeSet:t = "common"
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
			}
			setBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 820
					width:r = 2460
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
				setFsmActive {
					fsm:t = "velocityLock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setVelocityBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "velocityLock"
					active:b = true
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 65
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "PD HDN VS acquisition"
				}
			}
			setHprfVelocityStandbyMode {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfVelocitySearch"
				}
				setModeName {
					name:t = "PD HDN VS standby"
				}
			}
			setLprfStandbyMode {
				setStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfSearch"
				}
				setModeName {
					name:t = "standby"
				}
			}
			setHprfVelocitySearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfVelocitySearch"
				}
				setModeName {
					name:t = "PD HDN VS search"
				}
			}
			setLprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfSearch"
				}
				setModeName {
					name:t = "search"
				}
			}
			setLprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "acquisition"
				}
			}
			setHprfAcmLockParams {
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfAcm"
				}
				doCustomActionTemplate {
					fsm:t = "main"
					name:t = "setHprfAcmHmdLockModeName"
				}
			}
			setLprfAcmLockParams {
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfTrack"
				}
				doCustomActionTemplate {
					fsm:t = "main"
					name:t = "setLprfAcmHmdLockModeName"
				}
			}
			resetHmdStandbyMode {
				resetStandbyMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			resetHmdLockMode {
				resetAcmLockMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			setHmdTrackMode {
				setTrackMode {

				}
				setScanPattern {
					scanPattern:t = "hmdTrack"
				}
			}
			resetHmdTrackMode {
				resetTrackMode {

				}
			}
			setHprfAcmLockModeName {
				setModeName {
					name:t = "PD HDN ACM"
				}
			}
			setLprfAcmLockModeName {
				setModeName {
					name:t = "ACM"
				}
			}
			setHprfHmdLockModeName {
				setModeName {
					name:t = "PD HDN HMD"
				}
			}
			setLprfHmdLockModeName {
				setModeName {
					name:t = "HMD"
				}
			}
			setHmdStandbyMode {
				setEnabled {
					value:b = false
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 675
					width:r = 1950
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setHprfAcmHmdLockModeName"
					actionTemplateName:t = "setHprfHmdLockModeName"
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setLprfAcmHmdLockModeName"
					actionTemplateName:t = "setLprfHmdLockModeName"
				}
			}
			setHmdLockMode {
				setEnabled {
					value:b = true
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 675
					width:r = 1950
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setHprfAcmHmdLockModeName"
					actionTemplateName:t = "setHprfHmdLockModeName"
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setLprfAcmHmdLockModeName"
					actionTemplateName:t = "setLprfHmdLockModeName"
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 675
					width:r = 1950
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setHprfAcmHmdLockModeName"
					actionTemplateName:t = "setHprfAcmLockModeName"
				}
				setCustomActionTemplate {
					fsm:t = "main"
					name:t = "setLprfAcmHmdLockModeName"
					actionTemplateName:t = "setLprfAcmLockModeName"
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = true
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = true
					}
				}
			}
			standbyToHmdStandby {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = true
					}
				}
			}
			acmLockToHmdStandby {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdStandbyToSearch {
				stateFrom:t = "hmdStandby"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
					setFsmActive {
						fsm:t = "acmLockModes"
						active:b = false
					}
				}
			}
			hmdStandbyToStandby {
				stateFrom:t = "hmdStandby"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			hmdStandbyToHmdLock {
				stateFrom:t = "hmdStandby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
				}
			}
			hmdLockToHmdTrack {
				stateFrom:t = "hmdLock"
				event:t = "targetDetected"
				stateTo:t = "hmdTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
					}
				}
			}
			hmdLockToHmdStandby {
				stateFrom:t = "hmdLock"
				event:t = "scanFinished"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToHmdStandby {
				stateFrom:t = "hmdTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToStandby {
				stateFrom:t = "hmdTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
		}
	}
	searchModes {
		stateInit:t = "init"
		transitions {
			initToLprf {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "lprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setLprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setLprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setLprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setLprfAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setHprfAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
						actionTemplateName:t = "setHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
						actionTemplateName:t = "resetHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
						actionTemplateName:t = "setHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
						actionTemplateName:t = "resetHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
						actionTemplateName:t = "setHmdTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
						actionTemplateName:t = "resetHmdTrackMode"
					}
				}
			}
			lprfToHprfVelocity {
				stateFrom:t = "lprf"
				command:t = "modeSwitch"
				stateTo:t = "hprfVelocity"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setHprfVelocityStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setHprfVelocitySearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setVelocityBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setHprfAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setLprfAcmLockParams"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			hprfVelocityToLprf {
				stateFrom:t = "hprfVelocity"
				command:t = "modeSwitch"
				stateTo:t = "lprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setLprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setLprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setLprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
						actionTemplateName:t = "setLprfAcmLockParams"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
						actionTemplateName:t = "setHprfAcmLockParams"
					}
					clearTargets {

					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
					setCueDopplerSpeed {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	bvrLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	velocityLock {
		stateInit:t = "velocityLock"
		transitions {
			init {
				event:t = "fsmActivate"
				actions {
					setTransiver {
						transiver:t = "hprfVelocity"
					}
					setSignal {
						signal:t = "hprfVelocitySearch"
					}
				}
			}
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	acmLockModes {
		stateInit:t = "init"
		transitions {
			init {
				event:t = "fsmActivate"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			primaryToPrimaryStandby {
				stateFrom:t = "primary"
				event:t = "targetDetected"
				stateTo:t = "primaryStandby"
			}
			secondaryToSecondaryStandby {
				stateFrom:t = "secondary"
				event:t = "targetDetected"
				stateTo:t = "secondaryStandby"
			}
			primaryStandbyToPrimary {
				stateFrom:t = "primaryStandby"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			secondaryStandbyToSecondary {
				stateFrom:t = "secondaryStandby"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "secondary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
					}
				}
			}
			primaryToSecondary {
				stateFrom:t = "primary"
				command:t = "modeSwitch"
				stateTo:t = "secondary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
					}
				}
			}
			secondaryToPrimary {
				stateFrom:t = "secondary"
				command:t = "modeSwitch"
				stateTo:t = "primary"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			primaryAcmHmdSwitch {
				stateFrom:t = "primary"
				command:t = "acmSwitch"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setPrimaryMode"
					}
				}
			}
			secondaryAcmHmdSwitch {
				stateFrom:t = "secondary"
				command:t = "acmSwitch"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSecondaryMode"
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "init"
		actionsTemplates {
			setHprfTrack {
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfTrack"
				}
			}
			setLprfTrack {
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfTrack"
				}
			}
			trackPulse {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			trackDoppler {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					dopplerSpeedFilter {
						rateLim:p2 = 200, 200
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			extrapolate {
				extrapolateTargetsOfInterest {

				}
				clearTargetsOfInterest {
					timeOut:r = 3
					dirRateLim:r = 1
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
		}
		transitions {
			start {
				event:t = "fsmActivate"
				stateTo:t = "hprf"
				actions {
					setHprfTrack {

					}
					setModeName {
						name:t = "PD HDN track"
					}
				}
			}
			tryDetectHprf {
				stateFrom:t = "hprfTry"
				event:t = "update"
				actions {
					setHprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			lprfOkTryDetectHprf {
				stateFrom:t = "lprfOkHprfTry"
				event:t = "update"
				actions {
					setHprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setLprfTrack {

					}
				}
			}
			tryDetectLprf {
				stateFrom:t = "lprfTry"
				event:t = "update"
				actions {
					setLprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setHprfTrack {

					}
				}
			}
			detect {
				stateFrom:t = "hprf"
				stateFrom:t = "lprf"
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			trackHprf {
				stateFrom:t = "hprf"
				event:t = "targetDetected"
				actions {
					trackDoppler {

					}
				}
			}
			startTrackHprf {
				stateFrom:t = "hprfTry"
				stateFrom:t = "lprfOkHprfTry"
				event:t = "targetDetected"
				stateTo:t = "hprf"
				actions {
					setHprfTrack {

					}
					trackDoppler {

					}
					setModeName {
						name:t = "PD HDN track"
					}
				}
			}
			trackLprf {
				stateFrom:t = "lprf"
				event:t = "targetDetected"
				stateTo:t = "lprfOkHprfTry"
				actions {
					trackPulse {

					}
				}
			}
			startTrackLprf {
				stateFrom:t = "lprfTry"
				event:t = "targetDetected"
				stateTo:t = "lprf"
				actions {
					setLprfTrack {

					}
					trackPulse {

					}
					setModeName {
						name:t = "track"
					}
				}
			}
			hprfToLprf {
				stateFrom:t = "hprf"
				stateFrom:t = "hprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "lprfTry"
				actions {
					extrapolate {

					}
				}
			}
			backToLprf {
				stateFrom:t = "lprfOkHprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "lprfTry"
				actions {
					extrapolate {

					}
				}
			}
			lprfToHprf {
				stateFrom:t = "lprf"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
				}
			}
			lprfTryToHprf {
				stateFrom:t = "lprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
					setModeName {
						name:t = "track memory"
					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
	helmetDesignation {
		stateInit:t = "helmetDesignation"
		actionsTemplates {
			designateHelmetTargetDir {
				designateHelmetTarget {
					self:b = true
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
			}
		}
		transitions {
			activate {
				event:t = "fsmActivate"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
			updateDesignation {
				event:t = "update"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
		}
	}
}