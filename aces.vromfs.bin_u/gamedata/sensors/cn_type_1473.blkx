type:t = "radar"
name:t = "Type 1473"
weaponTargetsMax:i = 4
launchedMissilesPredictedPositionsMax:i = 4
showMissileLaunchZone:b = true
showMissileDgftLaunchZone:b = true
showMissileAimLead:b = true
transivers {
	mprf {
		sideLobesAttenuation:r = -20
		power:r = 1000
		band:i = 8
		rcs:r = 3
		range:r = 45000
		rangeMax:r = 60000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 3.5
			sideLobesSensitivity:r = -32
		}
	}
	hprf {
		sideLobesAttenuation:r = -20
		power:r = 1000
		band:i = 8
		rcs:r = 3
		range:r = 85000
		rangeMax:r = 120000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 3.5
			sideLobesSensitivity:r = -34
		}
	}
}
illuminationTransmitter {
	power:r = 200
	antenna {
		angleHalfSens:r = 10
		sideLobesSensitivity:r = -30
	}
}
scanPatterns {
	searchNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 2.5
		width:r = 30
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
	}
	searchMedium {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 5
		width:r = 60
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
	}
	bvrLockSearch {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 0.6
		width:r = 4
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
		indicate:b = true
	}
	twsNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 2
		width:r = 20
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	twsMedium {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 2
		width:r = 40
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	bvrLockTws {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		rollStabLimit:r = 90
		pitchStabLimit:r = 60
		period:r = 0.3
		width:r = 4
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = true
		indicate:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		period:r = 0.3
		width:r = 1.5
		indicate:b = true
	}
	verticalLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		period:r = 1
		width:r = 25
		barHeight:r = 2.5
		barsCount:i = 2
		rowMajor:b = false
		centerElevation:r = 15
		indicate:b = true
	}
	hmdLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		period:r = 0.2
		width:r = 0.75
		barHeight:r = 1.5
		barsCount:i = 2
		rowMajor:b = true
		indicate:b = true
		hmd:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
	}
	hmdTrack {
		type:t = "no"
		azimuthLimits:p2 = -85, 85
		elevationLimits:p2 = -45, 60
		hmd:b = true
	}
}
signals {
	mprfSearch {
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		mainBeamNotchWidth:r = 100
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 90000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 38
		}
	}
	hprfSearch {
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		mainBeamDopplerSpeed:b = true
		distance {
			presents:b = true
			minValue:r = 9000
			maxValue:r = 90000
			width:r = 3000
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = 50
			maxValue:r = 1200
			signalWidthMin:r = 5
			width:r = 150
		}
	}
	mprfAcm {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		mainBeamNotchWidth:r = 40
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 90000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	mprfTrack {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		targetId:b = true
		mainBeamNotchWidth:r = 40
		mainBeamNotchMaxElevation:r = 3.5
		track:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 90000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	hprfTrack {
		rangeFinder:b = true
		dopplerSpeedFinder:b = true
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		targetId:b = true
		absDopplerSpeed:b = false
		mainBeamDopplerSpeed:b = false
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 90000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -1200
			maxValue:r = 1200
			signalWidthMin:r = 2
			width:r = 24
		}
	}
	acmTrack {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		mainBeamNotchWidth:r = 40
		mainBeamNotchMaxElevation:r = 3.5
		track:b = true
		distance {
			presents:b = true
			minValue:r = 250
			maxValue:r = 10000
			width:r = 250
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 24
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchNarrow"
		scanPattern2:t = "searchMedium"
	}
	tws {
		scanPattern1:t = "twsNarrow"
		scanPattern2:t = "twsMedium"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
		scanPattern2:t = "verticalLock"
	}
}
scopeRangeSets {
	common {
		range1:r = 50000
		range2:r = 90000
		range3:r = 10000
		range4:r = 25000
	}
	acm {
		range1:r = 18500
	}
	hmd {
		range1:r = 18500
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -85, 85
					azmithWidth:r = 5
					elevationRange:p2 = -45, 60
					distanceRange:p2 = 0, 80000
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
					dopplerSpeedRange:p2 = -2500, 2500
					dopplerSpeedWidth:r = 60
					dopplerSpeedRelWidthMin:r = 0.05
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScopeRangeSet {
					scopeRangeSet:t = "common"
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
			}
			setBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfAcm"
				}
				setModeName {
					name:t = "PD ACM"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setSearchStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
			}
			setTwsStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			setTwsSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = true
				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
				setFsmActive {
					fsm:t = "tws"
					active:b = true
				}
			}
			resetTwsMode {
				clearTargets {

				}
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "tws"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			designatedTargetTws {
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
					sensorIndex:i = 0
				}
			}
			setTwsBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 300
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 20
				}
				setScanPattern {
					scanPattern:t = "bvrLockTws"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "TWS acquisition"
				}
				setModeName {
					name:t = "TWS acquisition"
				}
			}
			setMprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD standby"
				}
			}
			setHprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "PD HDN standby"
				}
			}
			setTwsStandbyMode {
				setTwsStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS standby"
				}
			}
			setMprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD search"
				}
			}
			setHprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfSearch"
				}
				setModeName {
					name:t = "PD HDN search"
				}
			}
			setTwsSearchMode {
				setTwsSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS search"
				}
			}
			setMprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD acquisition"
				}
			}
			setHprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD HDN acquisition"
				}
			}
			setHmdStandbyMode {
				setEnabled {
					value:b = false
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfAcm"
				}
				setModeName {
					name:t = "PD HMD"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "hmd"
				}
			}
			resetHmdStandbyMode {
				resetStandbyMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			setHmdLockMode {
				setEnabled {
					value:b = true
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "hmdLock"
				}
				resetScanPhase {

				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = true
				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfAcm"
				}
				setModeName {
					name:t = "PD HMD"
				}
			}
			resetHmdLockMode {
				resetAcmLockMode {

				}
				setFsmActive {
					fsm:t = "helmetDesignation"
					active:b = false
				}
			}
			setHmdTrackMode {
				setTrackMode {

				}
				setScanPattern {
					scanPattern:t = "hmdTrack"
				}
			}
			resetHmdTrackMode {
				resetTrackMode {

				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			standbyToHmdStandby {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
				}
			}
			acmLockToHmdStandby {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdStandbyToSearch {
				stateFrom:t = "hmdStandby"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			hmdStandbyToStandby {
				stateFrom:t = "hmdStandby"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			hmdStandbyToHmdLock {
				stateFrom:t = "hmdStandby"
				command:t = "selectTarget"
				stateTo:t = "hmdLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
					}
				}
			}
			hmdLockToHmdTrack {
				stateFrom:t = "hmdLock"
				event:t = "targetDetected"
				stateTo:t = "hmdTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
					}
				}
			}
			hmdLockToHmdStandby {
				stateFrom:t = "hmdLock"
				event:t = "scanFinished"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToHmdStandby {
				stateFrom:t = "hmdTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				stateTo:t = "hmdStandby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
					}
				}
			}
			hmdTrackToStandby {
				stateFrom:t = "hmdTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
		}
	}
	searchModes {
		stateInit:t = "init"
		transitions {
			initToMprf {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setMprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdStandbyMode"
						actionTemplateName:t = "setHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdStandbyMode"
						actionTemplateName:t = "resetHmdStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdLockMode"
						actionTemplateName:t = "setHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdLockMode"
						actionTemplateName:t = "resetHmdLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setHmdTrackMode"
						actionTemplateName:t = "setHmdTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetHmdTrackMode"
						actionTemplateName:t = "resetHmdTrackMode"
					}
				}
			}
			mprfToTws {
				stateFrom:t = "mprf"
				command:t = "modeSwitch"
				stateTo:t = "tws"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setTwsStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setTwsSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setTwsBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetTws"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetTwsMode"
					}
				}
			}
			twsToHprf {
				stateFrom:t = "tws"
				command:t = "modeSwitch"
				stateTo:t = "hprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setHprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setHprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setHprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			hprfToMprf {
				stateFrom:t = "hprf"
				command:t = "modeSwitch"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setMprfBvrLockMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	tws {
		stateInit:t = "search"
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 8
					}
					setCueToActiveTargetOfInterest {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					updateTargetOfInterest {
						limit:i = 10
						posGateTimeInitial:p2 = 2, 4
						posGateRangeInitial:r = 1500
						posGateMaxTime:r = 2
						posGateRange:p2 = 0, 1000
						dopplerSpeedGateRange:p2 = 0, 1600
						dopplerSpeedGateMaxTime:r = 8
					}
					updateActiveDetectedTarget {

					}
					setCueToActiveTargetOfInterest {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	bvrLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "init"
		actionsTemplates {
			setMprfTrack {
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfTrack"
				}
			}
			setHprfTrack {
				setTransiver {
					transiver:t = "hprf"
				}
				setSignal {
					signal:t = "hprfTrack"
				}
			}
			track {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					dopplerSpeedFilter {
						rateLim:p2 = 200, 200
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			extrapolate {
				extrapolateTargetsOfInterest {

				}
				clearTargetsOfInterest {
					timeOut:r = 3
					dirRateLim:r = 1
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
		}
		transitions {
			start {
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			tryDetectMprf {
				stateFrom:t = "mprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			hprfOkTryDetectMprf {
				stateFrom:t = "hprfOkMprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setHprfTrack {

					}
				}
			}
			tryDetectHprf {
				stateFrom:t = "hprfTry"
				event:t = "update"
				actions {
					setHprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setMprfTrack {

					}
				}
			}
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			trackMprf {
				stateFrom:t = "mprf"
				event:t = "targetDetected"
				actions {
					track {

					}
				}
			}
			startTrackMprf {
				stateFrom:t = "mprfTry"
				stateFrom:t = "hprfOkMprfTry"
				event:t = "targetDetected"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					track {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			trackHprf {
				stateFrom:t = "hprf"
				event:t = "targetDetected"
				stateTo:t = "hprfOkMprfTry"
				actions {
					track {

					}
				}
			}
			trackHprf {
				stateFrom:t = "hprf"
				event:t = "targetDetected"
				stateTo:t = "mprfTry"
				actions {
					track {

					}
					setMprfTrack {

					}
				}
			}
			startTrackHprf {
				stateFrom:t = "hprfTry"
				event:t = "targetDetected"
				stateTo:t = "hprf"
				actions {
					setHprfTrack {

					}
					track {

					}
					setModeName {
						name:t = "PD HDN track"
					}
				}
			}
			mprfToHprf {
				stateFrom:t = "mprf"
				stateFrom:t = "mprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
				}
			}
			backToHprf {
				stateFrom:t = "hprfOkMprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "hprfTry"
				actions {
					extrapolate {

					}
				}
			}
			hprfToMprf {
				stateFrom:t = "hprf"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
				}
			}
			hprfTryToMprf {
				stateFrom:t = "hprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
					setModeName {
						name:t = "track memory"
					}
				}
			}
		}
	}
	helmetDesignation {
		stateInit:t = "helmetDesignation"
		actionsTemplates {
			designateHelmetTargetDir {
				designateHelmetTarget {
					self:b = true
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
			}
		}
		transitions {
			activate {
				event:t = "fsmActivate"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
			updateDesignation {
				event:t = "update"
				actions {
					designateHelmetTargetDir {

					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
}
targetTypeId {
	name:t = "hud/single prop"
	targetPropulsion {
		type:t = "propellers"
		num:i = 1
	}
}
targetTypeId {
	name:t = "hud/multi prop"
	targetPropulsion {
		type:t = "propellers"
		num:i = 2
	}
	targetPropulsion {
		type:t = "propellers"
		num:i = 3
	}
	targetPropulsion {
		type:t = "propellers"
		num:i = 4
	}
}
targetTypeId {
	name:t = "hud/single jet"
	targetPropulsion {
		type:t = "jet"
		num:i = 1
	}
}
targetTypeId {
	name:t = "hud/multi jet"
	targetPropulsion {
		type:t = "jet"
		num:i = 2
	}
	targetPropulsion {
		type:t = "jet"
		num:i = 3
	}
	targetPropulsion {
		type:t = "jet"
		num:i = 4
	}
}
targetTypeId {
	name:t = "hud/helicopter"
	targetPropulsion {
		type:t = "rotors"
	}
}
targetTypeId {
	name:t = "hud/rocket"
	targetPropulsion {
		type:t = "rocket"
	}
}
targetTypeId {
	name:t = "hud/small"
	sizeRange:p2 = 0, 5
}
targetTypeId {
	name:t = "hud/medium"
	sizeRange:p2 = 5, 25
}
targetTypeId {
	name:t = "hud/large"
	sizeRange:p2 = 25, 500
}