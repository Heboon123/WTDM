type:t = "radar"
name:t = "Ferranti Blue Vixen"
showMissileLaunchZone:b = true
showMissileDgftLaunchZone:b = true
weaponTargetsMax:i = 4
launchedMissilesPredictedPositionsMax:i = 6
showMissileAimLead:b = true
transivers {
	mprf {
		sideLobesAttenuation:r = -20
		power:r = 600
		band:i = 8
		rcs:r = 3
		range:r = 55000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4
			sideLobesSensitivity:r = -32
		}
	}
	hprfVelocity {
		sideLobesAttenuation:r = -20
		power:r = 1200
		band:i = 8
		rcs:r = 3
		range:r = 100000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4
			sideLobesSensitivity:r = -32
		}
	}
	lprf {
		sideLobesAttenuation:r = -20
		power:r = 600
		band:i = 8
		rcs:r = 5
		range:r = 75000
		rangeMax:r = 150000
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 4
			sideLobesSensitivity:r = -32
		}
	}
}
illuminationTransmitter {
	power:r = 1200
	antenna {
		angleHalfSens:r = 4
		sideLobesSensitivity:r = -32
	}
}
scanPatterns {
	searchNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 0.6
		width:r = 10
		barHeight:r = 2.85
		barsCount:i = 2
		rowMajor:b = true
	}
	searchMedium {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 3.4
		width:r = 30
		barHeight:r = 2.85
		barsCount:i = 4
		rowMajor:b = true
	}
	searchWide {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 4
		width:r = 70
		barHeight:r = 2.85
		barsCount:i = 2
		rowMajor:b = true
	}
	twsNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 0.6
		width:r = 10
		barHeight:r = 2.85
		barsCount:i = 2
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	twsMedium {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 3.4
		width:r = 30
		barHeight:r = 2.85
		barsCount:i = 4
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	twsWide {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 4
		width:r = 70
		barHeight:r = 2.85
		barsCount:i = 2
		rowMajor:b = true
		preciseMinor:b = true
		tws:b = true
	}
	superScan {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		period:r = 1.75
		width:r = 25
		barHeight:r = 3.3
		barsCount:i = 3
		rowMajor:b = false
		centerElevation:r = 20
		indicate:b = true
	}
	cas20 {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		period:r = 1.4
		width:r = 15
		barHeight:r = 2.5
		barsCount:i = 4
		rowMajor:b = false
		indicate:b = true
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		period:r = 0.5
		width:r = 1.25
		indicate:b = true
	}
	bvrLockTws {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 0.35
		width:r = 5.7
		barHeight:r = 3
		barsCount:i = 2
		rowMajor:b = false
		indicate:b = true
	}
	bvrLockSearch {
		type:t = "pyramide"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 180
		pitchStabLimit:r = 70
		period:r = 0.7
		width:r = 5.7
		barHeight:r = 3
		barsCount:i = 4
		rowMajor:b = false
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -70, 70
		elevationLimits:p2 = -60, 60
	}
}
signals {
	mprfSearch {
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		mainBeamNotchWidth:r = 60
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 74000
			width:r = 500
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 30
		}
	}
	hprfVelocitySearch {
		rangeFinder:b = false
		dopplerSpeedFinder:b = true
		groundClutter:b = false
		aircraftAsTarget:b = true
		friendFoeId:b = true
		mainBeamDopplerSpeed:b = true
		dopplerSpeed {
			presents:b = true
			minValue:r = 40
			maxValue:r = 1500
			signalWidthMin:r = 2
			width:r = 30
		}
	}
	lprfSearch {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 150000
			width:r = 200
		}
	}
	mprfAcm {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		mainBeamNotchWidth:r = 40
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 74000
			width:r = 150
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 20
		}
	}
	mprfTrack {
		groundClutter:b = false
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 15
		mainBeamNotchWidth:r = 40
		mainBeamNotchMaxElevation:r = 4
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 74000
			width:r = 150
		}
		dopplerSpeed {
			presents:b = true
			minValue:r = -2500
			maxValue:r = 2500
			signalWidthMin:r = 2
			width:r = 20
		}
	}
	lprfTrack {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.05
		distanceAccuracy:r = 12
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 74000
			width:r = 150
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchMedium"
		scanPattern2:t = "searchNarrow"
		scanPattern3:t = "searchWide"
	}
	tws {
		scanPattern1:t = "twsMedium"
		scanPattern2:t = "twsNarrow"
		scanPattern3:t = "twsWide"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
		scanPattern2:t = "superScan"
		scanPattern3:t = "cas20"
	}
}
scopeRangeSets {
	common {
		range1:r = 37000
		range2:r = 74000
		range3:r = 148000
		range4:r = 18500
	}
	acm {
		range1:r = 18500
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -70, 70
					azmithWidth:r = 1.5
					elevationRange:p2 = -60, 60
					distanceRange:p2 = 0, 92500
					distanceWidth:r = 2000
					distanceRelWidthMin:r = 0.05
					dopplerSpeedRange:p2 = -2500, 2500
					dopplerSpeedWidth:r = 60
					dopplerSpeedRelWidthMin:r = 0.05
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbySearchModeCommon {
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScopeRangeSet {
					scopeRangeSet:t = "common"
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = true
				}
			}
			setStandbyModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = false
				}
			}
			resetStandbyMode {
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			setBvrLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				resetScanPhase {

				}
			}
			setBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
			}
			designatedTargetSearch {
				designateTargetUnderCue {
					type:t = "cue"
					self:b = true
				}
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = false
				}
				setFsmActive {
					fsm:t = "velocityLock"
					active:b = false
				}
			}
			setTrackMode {
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			setAcmLockMode {
				setEnabled {
					value:b = true
				}
				resetScanPhase {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "acmLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
				setRelSpeedGatePos {
					source:t = "constRange"
					pos:r = 0
					width:r = 3000
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acm"
				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfAcm"
				}
				setModeName {
					name:t = "PD ACM"
				}
				setDesignationSourceType {
					sourceType:t = "radar"
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "acmLock"
					active:b = false
				}
			}
			setSearchStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
			}
			setTwsStandbyModeCommon {
				setStandbyModeCommon {

				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
			}
			setSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
			}
			setTwsSearchModeCommon {
				setStandbySearchModeCommon {

				}
				setEnabled {
					value:b = true
				}
				setCueEnabled {
					value:b = true
					updateActiveTargetUnderCue:b = true
				}
				setScanPatternSet {
					scanPatternSet:t = "tws"
				}
				setFsmActive {
					fsm:t = "tws"
					active:b = true
				}
			}
			resetTwsMode {
				clearTargets {

				}
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "tws"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
				setFsmActive {
					fsm:t = "searchModes"
					active:b = false
				}
			}
			designatedTargetTws {
				designateActiveDetectedTarget {
					type:t = "target"
					self:b = true
					sensorIndex:i = 0
				}
			}
			setTwsBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "bvrLock"
					active:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 300
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 20
				}
				setScanPattern {
					scanPattern:t = "bvrLockTws"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "TWS acquisition"
				}
				setModeName {
					name:t = "TWS acquisition"
				}
			}
			setVelocityBvrLockMode {
				setBvrLockModeCommon {

				}
				setFsmActive {
					fsm:t = "velocityLock"
					active:b = true
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 30
				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setModeName {
					name:t = "PD HDN VS acquisition"
				}
			}
			setMprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD standby"
				}
			}
			setHprfVelocityStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "hprfVelocity"
				}
				setSignal {
					signal:t = "hprfVelocitySearch"
				}
				setModeName {
					name:t = "PD HDN VS standby"
				}
			}
			setLprfStandbyMode {
				setSearchStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfSearch"
				}
				setModeName {
					name:t = "standby"
				}
			}
			setTwsStandbyMode {
				setTwsStandbyModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS standby"
				}
			}
			setMprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "PD search"
				}
			}
			setHprfVelocitySearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "hprfVelocity"
				}
				setSignal {
					signal:t = "hprfVelocitySearch"
				}
				setModeName {
					name:t = "PD HDN VS search"
				}
			}
			setLprfSearchMode {
				setSearchModeCommon {

				}
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfSearch"
				}
				setModeName {
					name:t = "search"
				}
			}
			setTwsSearchMode {
				setTwsSearchModeCommon {

				}
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfSearch"
				}
				setModeName {
					name:t = "TWS search"
				}
			}
			setMprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "PD acquisition"
				}
			}
			setLprfBvrLockMode {
				setBvrLockMode {

				}
				setModeName {
					name:t = "acquisition"
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
				}
			}
			standbyToSearch {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			searchToStandby {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
					}
				}
			}
			checkDesignationType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkDesignationType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkDesignationType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBvrTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateStandbyMode {
				stateFrom:t = "standby"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			updateSearchMode {
				stateFrom:t = "search"
				event:t = "fsmActivate"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			switchScanPattern {
				stateFrom:t = "standby"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				stateFrom:t = "acmLock"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "selectTarget"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmLockToSearch {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
					}
				}
			}
		}
	}
	searchModes {
		stateInit:t = "init"
		transitions {
			initToMprf {
				stateFrom:t = "init"
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetStandbyMode"
						actionTemplateName:t = "resetStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setMprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrLockMode"
						actionTemplateName:t = "resetBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmLockMode"
						actionTemplateName:t = "setAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmLockMode"
						actionTemplateName:t = "resetAcmLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetBvrTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setAcmTrackMode"
						actionTemplateName:t = "setTrackMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetAcmTrackMode"
						actionTemplateName:t = "resetTrackMode"
					}
				}
			}
			mprfToTws {
				stateFrom:t = "mprf"
				command:t = "modeSwitch"
				stateTo:t = "tws"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setTwsStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setTwsSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setTwsBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetTws"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetTwsMode"
					}
				}
			}
			twsToLprf {
				stateFrom:t = "tws"
				command:t = "modeSwitch"
				stateTo:t = "lprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setLprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setLprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setLprfBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					doCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			lprfToHprfVelocity {
				stateFrom:t = "lprf"
				command:t = "modeSwitch"
				stateTo:t = "hprfVelocity"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setHprfVelocityStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setHprfVelocitySearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setVelocityBvrLockMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "designateTarget"
						actionTemplateName:t = "designatedTargetSearch"
					}
					clearTargets {

					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
			hprfVelocityToMprf {
				stateFrom:t = "hprfVelocity"
				command:t = "modeSwitch"
				stateTo:t = "mprf"
				actions {
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setStandbyMode"
						actionTemplateName:t = "setMprfStandbyMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setSearchMode"
						actionTemplateName:t = "setMprfSearchMode"
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "setBvrLockMode"
						actionTemplateName:t = "setMprfBvrLockMode"
					}
					clearTargets {

					}
					setFsmActive {
						fsm:t = "main"
						active:b = false
					}
					setFsmActive {
						fsm:t = "main"
						active:b = true
					}
					setCustomActionTemplate {
						fsm:t = "main"
						name:t = "resetSearchMode"
						actionTemplateName:t = "resetSearchMode"
					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
					setCueDopplerSpeed {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	tws {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 8
					}
					setCueToActiveTargetOfInterest {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTargetOfInterestCandidate {

					}
					updateActiveDetectedTarget {

					}
					setCueToActiveTargetOfInterest {

					}
				}
			}
			matchTargets {
				event:t = "scanFinished"
				actions {
					matchTargetsOfInterest {
						limit:i = 10
						posGateTimeInitial:p2 = 4, 6
						posGateRangeInitial:r = 3000
						posGateMaxTime:r = 4
						posGateRange:p2 = 0, 1200
						dopplerSpeedGateMaxTime:r = 4
						dopplerSpeedGateRange:p2 = 0, 400
					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	bvrLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	velocityLock {
		stateInit:t = "velocityLock"
		transitions {
			init {
				event:t = "fsmActivate"
				actions {
					setTransiver {
						transiver:t = "hprfVelocity"
					}
					setSignal {
						signal:t = "hprfVelocitySearch"
					}
				}
			}
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	acmLock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "init"
		actionsTemplates {
			setMprfTrack {
				setTransiver {
					transiver:t = "mprf"
				}
				setSignal {
					signal:t = "mprfTrack"
				}
			}
			setLprfTrack {
				setTransiver {
					transiver:t = "lprf"
				}
				setSignal {
					signal:t = "lprfTrack"
				}
			}
			trackPulse {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			trackDoppler {
				updateActiveTargetOfInterest {
					dirFilter {
						rateLim:p2 = 0.78, 0.78
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					distFilter {
						accelLim:p2 = 150, 150
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
					dopplerSpeedFilter {
						rateLim:p2 = 200, 200
						limTimeOut:r = 1
						inertialTimeMax:r = 1
					}
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
			extrapolate {
				extrapolateTargetsOfInterest {

				}
				clearTargetsOfInterest {
					timeOut:r = 3
					dirRateLim:r = 1
				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setRelSpeedGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
			}
		}
		transitions {
			start {
				event:t = "fsmActivate"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			tryDetectMprf {
				stateFrom:t = "mprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			lprfOkTryDetectMprf {
				stateFrom:t = "lprfOkMprfTry"
				event:t = "update"
				actions {
					setMprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setLprfTrack {

					}
				}
			}
			tryDetectLprf {
				stateFrom:t = "lprfTry"
				event:t = "update"
				actions {
					setLprfTrack {

					}
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
					setMprfTrack {

					}
				}
			}
			detect {
				stateFrom:t = "mprf"
				stateFrom:t = "lprf"
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			trackMprf {
				stateFrom:t = "mprf"
				event:t = "targetDetected"
				actions {
					trackDoppler {

					}
				}
			}
			startTrackMprf {
				stateFrom:t = "mprfTry"
				stateFrom:t = "lprfOkMprfTry"
				event:t = "targetDetected"
				stateTo:t = "mprf"
				actions {
					setMprfTrack {

					}
					trackDoppler {

					}
					setModeName {
						name:t = "PD track"
					}
				}
			}
			trackLprf {
				stateFrom:t = "lprf"
				event:t = "targetDetected"
				stateTo:t = "lprfOkMprfTry"
				actions {
					trackPulse {

					}
				}
			}
			startTrackLprf {
				stateFrom:t = "lprfTry"
				event:t = "targetDetected"
				stateTo:t = "lprf"
				actions {
					setLprfTrack {

					}
					trackPulse {

					}
					setModeName {
						name:t = "track"
					}
				}
			}
			mprfToLprf {
				stateFrom:t = "mprf"
				stateFrom:t = "mprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "lprfTry"
				actions {
					extrapolate {

					}
				}
			}
			backToLprf {
				stateFrom:t = "lprfOkMprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "lprfTry"
				actions {
					extrapolate {

					}
				}
			}
			lprfToMprf {
				stateFrom:t = "lprf"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
				}
			}
			lprfTryToMprf {
				stateFrom:t = "lprfTry"
				event:t = "targetNotDetected"
				stateTo:t = "mprfTry"
				actions {
					extrapolate {

					}
					setModeName {
						name:t = "track memory"
					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
}