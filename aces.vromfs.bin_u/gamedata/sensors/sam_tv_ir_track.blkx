type:t = "radar"
name:t = "TV/IR tracker"
transivers {
	track {
		power:r = 200
		band:i = -1
		rcs:r = 8000
		range:r = 10000
		rangeMax:r = 12000
		visibilityType:t = "infraRed"
		range0:r = 0
		range1:r = 100000
		range2:r = 0
		range3:r = 0
		range4:r = 0
		range5:r = 0
		range6:r = 0
		range7:r = 0
		antenna {
			angleHalfSens:r = 0.4
			sideLobesSensitivity:r = -120
		}
	}
}
scanPatterns {
	lock {
		type:t = "pyramide"
		azimuthLimits:p2 = -180, 180
		elevationLimits:p2 = -10, 80
		yawStabLimit:r = 180
		pitchStabLimit:r = 80
		rollStabLimit:r = 10
		period:r = 0.1
		width:r = 22.5
		barHeight:r = 0.4
		barsCount:i = 12
		rowMajor:b = false
		indicate:b = true
	}
	losLock {
		type:t = "pyramide"
		azimuthLimits:p2 = -20, 20
		elevationLimits:p2 = -10, 80
		yawStabLimit:r = 180
		pitchStabLimit:r = 80
		rollStabLimit:r = 10
		period:r = 0.25
		width:r = 0.4
		barHeight:r = 0.4
		barsCount:i = 2
		rowMajor:b = false
		indicate:b = true
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -20, 20
		elevationLimits:p2 = -10, 80
		yawStabLimit:r = 180
		pitchStabLimit:r = 80
		rollStabLimit:r = 10
	}
}
signals {
	track {
		groundClutter:b = false
		angularAccuracy:r = 0.01
		distanceAccuracy:r = 2
		targetRadiusMin:r = 0.2
		distance {
			presents:b = true
			minValue:r = 30
			maxValue:r = 12000
		}
		dopplerSpeed {
			presents:b = false
		}
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setTargetDesignationRange {

				}
				setTransiver {
					transiver:t = "track"
				}
				setSignal {
					signal:t = "track"
				}
			}
			setStandbyMode {
				setModeName {
					name:t = "standby"
				}
				setEnabled {
					value:b = false
				}
				setScanPattern {
					scanPattern:t = "lock"
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "lock"
					active:b = false
				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 9
				}
			}
			setLockModeCommon1 {
				setModeName {
					name:t = "acquisition"
				}
				setWeaponDetectionAllowance {
					source:t = "const"
					value:b = true
				}
				setDesignatedTarget {
					set:b = true
				}
				setEnabled {
					value:b = true
				}
			}
			setLockModeCommon2 {
				resetScanPhase {

				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				clearTargetsOfInterest {

				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
			}
			setLockModeCue {
				setLockModeCommon1 {

				}
				setScanPattern {
					scanPattern:t = "lock"
				}
				setLockModeCommon2 {

				}
				setCenterElevation {
					source:t = "constant"
					value:r = 22.5
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 1000
				}
			}
			setLockModeTarget {
				setLockModeCommon1 {

				}
				setScanPattern {
					scanPattern:t = "lock"
				}
				setLockModeCommon2 {

				}
				setCenterElevation {
					source:t = "constant"
					value:r = 22.5
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 1000
				}
			}
			setLosVisualLockModeCommon {
				setEnabled {
					value:b = true
				}
				setScanPattern {
					scanPattern:t = "losLock"
				}
				resetScanPhase {

				}
				clearTargetsOfInterest {

				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
				setModeName {
					name:t = "acquisition"
				}
				setEnabled {
					value:b = true
				}
			}
			setLosLockMode {
				setLosVisualLockModeCommon {

				}
				setWeaponDetectionAllowance {
					source:t = "targetDesignation"
				}
				setDesignatedTarget {
					set:b = false
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 6000
					width:r = 12000
				}
			}
			setVisualLockMode {
				setLosVisualLockModeCommon {

				}
				setWeaponDetectionAllowance {
					source:t = "const"
					value:b = true
				}
				setDesignatedTarget {
					set:b = true
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 100
				}
			}
			setTrackMode {
				setModeName {
					name:t = "track"
				}
				setEnabled {
					value:b = true
				}
				setWeaponDetectionAllowance {
					source:t = "const"
					value:b = true
				}
				setDesignatedTarget {
					set:b = false
				}
				setScanPattern {
					scanPattern:t = "track"
				}
				clearTargetsOfInterest {

				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
					setStandbyMode {

					}
				}
			}
			checkLockTypeCue {
				stateFrom:t = "standby"
				command:t = "designateTarget"
				stateTo:t = "checkLockTypeCue"
				actions {
					checkDesignationTypeEquals {
						type:t = "cue"
					}
				}
			}
			lockCue {
				stateFrom:t = "checkLockTypeCue"
				event:t = "designationTypeEquals"
				stateTo:t = "lockCue"
				actions {
					setLockModeCue {

					}
				}
			}
			checkLockTypeTarget {
				stateFrom:t = "checkLockTypeCue"
				event:t = "designationTypeNotEquals"
				stateTo:t = "checkLockTypeTarget"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
					}
				}
			}
			lockTarget {
				stateFrom:t = "checkLockTypeTarget"
				event:t = "designationTypeEquals"
				stateTo:t = "lockTarget"
				actions {
					setLockModeTarget {

					}
				}
			}
			checkLockTypeLos {
				stateFrom:t = "checkLockTypeTarget"
				event:t = "designationTypeNotEquals"
				stateTo:t = "checkLockTypeLos"
				actions {
					checkDesignationTypeEquals {
						type:t = "los"
					}
				}
			}
			lockLos {
				stateFrom:t = "checkLockTypeLos"
				event:t = "designationTypeEquals"
				stateTo:t = "losLock"
				actions {
					setLosLockMode {

					}
				}
			}
			checkLockTypeLos {
				stateFrom:t = "checkLockTypeLos"
				event:t = "designationTypeNotEquals"
				stateTo:t = "checkLockTypeVisual"
				actions {
					checkDesignationTypeEquals {
						type:t = "visual"
					}
				}
			}
			lockVisual {
				stateFrom:t = "checkLockTypeVisual"
				event:t = "designationTypeEquals"
				stateTo:t = "visualLock"
				actions {
					setVisualLockMode {

					}
				}
			}
			finishTypeCheck {
				stateFrom:t = "checkLockTypeVisual"
				event:t = "designationTypeNotEquals"
				stateTo:t = "standby"
			}
			track {
				stateFrom:t = "lockCue"
				stateFrom:t = "lockTarget"
				stateFrom:t = "losLock"
				stateFrom:t = "visualLock"
				event:t = "targetDetected"
				stateTo:t = "track"
				actions {
					setTrackMode {

					}
					setFsmActive {
						fsm:t = "lock"
						active:b = false
					}
				}
			}
			failedLock {
				stateFrom:t = "lockCue"
				stateFrom:t = "lockTarget"
				stateFrom:t = "losLock"
				stateFrom:t = "visualLock"
				event:t = "scanFinished"
				stateTo:t = "standby"
				actions {
					setStandbyMode {

					}
					setFsmActive {
						fsm:t = "lock"
						active:b = false
					}
				}
			}
			finishedTrack {
				stateFrom:t = "track"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "designateTarget"
				stateTo:t = "standby"
				actions {
					setStandbyMode {

					}
					setFsmActive {
						fsm:t = "track"
						active:b = false
					}
				}
			}
		}
	}
	lock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "track"
		transitions {
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			track {
				event:t = "targetDetected"
				actions {
					updateActiveTargetOfInterest {
						dirFilter {
							rateLim:p2 = 0.78, 0.78
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
						distFilter {
							accelLim:p2 = 150, 150
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			extrapolate {
				event:t = "targetNotDetected"
				actions {
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 2
						dirRateLim:r = 0.78
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
		}
	}
}