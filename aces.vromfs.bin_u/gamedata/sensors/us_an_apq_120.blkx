type:t = "radar"
name:t = "AN/APQ-120"
showMissileLaunchZone:b = true
transivers {
	common {
		sideLobesAttenuation:r = -20
		power:r = 400
		band:i = 8
		rcs:r = 5
		range:r = 60000
		rangeMax:r = 120000
		timeGainControl:b = true
		multipathEffect:p4 = 0, 1, 60, 0
		antenna {
			angleHalfSens:r = 6.7
			sideLobesSensitivity:r = -28
		}
	}
}
illuminationTransmitter {
	power:r = 200
	antenna {
		angleHalfSens:r = 10
		sideLobesSensitivity:r = -30
	}
}
scanPatterns {
	searchNarrow {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 1.5
		width:r = 22.5
		barHeight:r = 3.75
		barsCount:i = 2
		rowMajor:b = true
		barsOneWay:b = true
		centerElevation:r = -2
	}
	searchWide {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 4
		width:r = 60
		barHeight:r = 3.75
		barsCount:i = 2
		rowMajor:b = true
		barsOneWay:b = true
		centerElevation:r = -2
	}
	boresightLock {
		type:t = "cone"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		period:r = 0.5
		width:r = 3.35
		centerElevation:r = -2
		indicate:b = true
	}
	bvrLockSearch {
		type:t = "pyramide"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
		rollStabLimit:r = 70
		pitchStabLimit:r = 60
		period:r = 0.5
		width:r = 7.8
		barHeight:r = 3.3
		barsCount:i = 2
		rowMajor:b = false
		indicate:b = true
		centerElevation:r = -2
	}
	track {
		type:t = "no"
		azimuthLimits:p2 = -60, 60
		elevationLimits:p2 = -60, 60
	}
}
signals {
	search {
		dynamicRange:p2 = 40, 15
		groundClutter:b = true
		aircraftAsTarget:b = true
		friendFoeId:b = true
		distance {
			presents:b = true
			minValue:r = 500
			maxValue:r = 370000
			width:r = 300
		}
	}
	track {
		dynamicRange:p2 = 40, 13
		groundClutter:b = true
		aircraftAsTarget:b = true
		angularAccuracy:r = 0.06
		distanceAccuracy:r = 15
		track:b = true
		distance {
			presents:b = true
			minValue:r = 200
			maxValue:r = 92500
			width:r = 300
		}
	}
}
scanPatternSets {
	search {
		scanPattern1:t = "searchNarrow"
		scanPattern2:t = "searchWide"
	}
	acmLock {
		scanPattern1:t = "boresightLock"
	}
}
scopeRangeSets {
	search {
		range1:r = 46250
		range2:r = 92500
		range3:r = 185000
		range4:r = 370000
		range5:r = 9250
		range6:r = 18500
	}
	acmLock {
		range1:r = 18500
	}
}
fsms {
	main {
		stateInit:t = "init"
		actionsTemplates {
			init {
				setEnabled {
					value:b = false
				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setTargetDesignationRange {
					azimuthRange:p2 = -60, 60
					azimuthWidth:r = 8
					elevationRange:p2 = -60, 60
					distanceRange:p2 = 0, 92500
					distanceRelWidthMin:r = 0.05
					distanceWidth:r = 2000
				}
				setTransiver {
					transiver:t = "common"
				}
				setSignal {
					signal:t = "search"
				}
			}
			setStandbyMode {
				setModeName {
					name:t = "standby"
				}
				setEnabled {
					value:b = false
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setSignal {
					signal:t = "search"
				}
			}
			resetStandbyMode {

			}
			setSearchMode {
				setModeName {
					name:t = "search"
				}
				setEnabled {
					value:b = true
				}
				setFsmActive {
					fsm:t = "search"
					active:b = true
				}
				setCueEnabled {
					value:b = true
				}
				setScanPatternSet {
					scanPatternSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setSignal {
					signal:t = "search"
				}
			}
			resetSearchMode {
				clearTargets {

				}
				setFsmActive {
					fsm:t = "search"
					active:b = false
				}
				setCueEnabled {
					value:b = false
				}
			}
			setBvrLockMode {
				setModeName {
					name:t = "acquisition"
				}
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "bvrLockSearch"
				}
				resetScanPhase {

				}
				setCenterAzimuth {
					source:t = "targetDesignation"
				}
				setCenterElevation {
					source:t = "targetDesignation"
				}
				setDistGatePos {
					source:t = "targetDesignation"
					width:r = 2000
				}
				setRelSpeedGatePos {
					source:t = "targetDesignation"
					width:r = 30
				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "search"
				}
				setSignal {
					signal:t = "track"
				}
			}
			resetBvrLockMode {
				setFsmActive {
					fsm:t = "lock"
					active:b = false
				}
			}
			setTrackMode {
				setModeName {
					name:t = "track"
				}
				setEnabled {
					value:b = true
				}
				setScanPatternSet {

				}
				setScanPattern {
					scanPattern:t = "track"
				}
				clearTargetsOfInterest {

				}
				addTargetOfInterest {

				}
				setLastTargetOfInterestActive {

				}
				updateActiveTargetOfInterest {

				}
				setCenterAzimuth {
					source:t = "activeTargetOfInterest"
				}
				setCenterElevation {
					source:t = "activeTargetOfInterest"
				}
				setDistGatePos {
					source:t = "activeTargetOfInterest"
					width:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = true
				}
				setSignal {
					signal:t = "track"
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = true
				}
			}
			resetTrackMode {
				clearTargetsOfInterest {

				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setFsmActive {
					fsm:t = "track"
					active:b = false
				}
				setFsmActive {
					fsm:t = "illumination"
					active:b = false
				}
			}
			setAcmLockMode {
				setModeName {
					name:t = "ACM"
				}
				setEnabled {
					value:b = true
				}
				clearTargetsOfInterest {

				}
				setScanPatternSet {
					scanPatternSet:t = "acmLock"
				}
				setScopeRangeSet {

				}
				resetScanPhase {

				}
				setCenterAzimuth {
					source:t = "constant"
					value:r = 0
				}
				setCenterElevation {
					source:t = "constant"
					value:r = 0
				}
				setDistGatePos {
					source:t = "constRange"
				}
				setFsmActive {
					fsm:t = "lock"
					active:b = true
				}
				setScopeRangeSet {
					scopeRangeSet:t = "acmLock"
				}
				setSignal {
					signal:t = "track"
				}
				setDistGatePos {
					source:t = "constRange"
					pos:r = 9250
					width:r = 18500
				}
			}
			resetAcmLockMode {
				setFsmActive {
					fsm:t = "lock"
					active:b = false
				}
			}
		}
		transitions {
			init {
				stateFrom:t = "init"
				event:t = "init"
				stateTo:t = "standby"
				actions {
					init {

					}
					setStandbyMode {

					}
				}
			}
			switchOn {
				stateFrom:t = "standby"
				command:t = "switch"
				event:t = "enable"
				stateTo:t = "search"
				actions {
					setSearchMode {

					}
				}
			}
			switchOff {
				stateFrom:t = "search"
				command:t = "switch"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetSearchMode {

					}
					setStandbyMode {

					}
				}
			}
			switchScanPattern {
				stateFrom:t = "acmLock"
				stateFrom:t = "search"
				command:t = "scanPatternSwitch"
				actions {
					setNextScanPattern {

					}
				}
			}
			switchScopeRange {
				command:t = "rangeSwitch"
				actions {
					setNextScopeRange {

					}
				}
			}
			bvrLock {
				stateFrom:t = "search"
				command:t = "selectTarget"
				actions {
					designateActiveDetectedTarget {
						type:t = "target"
						self:b = true
						sensorIndex:i = 0
					}
					designateTargetUnderCue {
						type:t = "cue"
						self:b = true
						sensorIndex:i = 0
					}
				}
			}
			checkBvrType0 {
				stateFrom:t = "search"
				command:t = "designateTarget"
				stateTo:t = "checkBvrType0"
				actions {
					checkDesignationTypeEquals {
						type:t = "target"
						type:t = "cue"
					}
				}
			}
			bvrLockResponce {
				stateFrom:t = "checkBvrType0"
				event:t = "designationTypeEquals"
				stateTo:t = "bvrLock"
				actions {
					resetSearchMode {

					}
					setBvrLockMode {

					}
				}
			}
			returnToSearchMode {
				stateFrom:t = "checkBvrType0"
				event:t = "designationTypeNotEquals"
				stateTo:t = "search"
			}
			bvrLockToBVRTrack {
				stateFrom:t = "bvrLock"
				event:t = "targetDetected"
				stateTo:t = "bvrTrack"
				actions {
					resetBvrLockMode {

					}
					setTrackMode {

					}
				}
			}
			failedBvrLock {
				stateFrom:t = "bvrLock"
				event:t = "scanFinished"
				stateTo:t = "search"
				actions {
					resetBvrLockMode {

					}
					setSearchMode {

					}
				}
			}
			finishedBvrTrack {
				stateFrom:t = "bvrTrack"
				event:t = "targetsOfInterestCleanup"
				command:t = "selectTarget"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					resetTrackMode {

					}
					setSearchMode {

					}
				}
			}
			finishBvrTrackAndSwitchOff {
				stateFrom:t = "bvrTrack"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetTrackMode {

					}
					setStandbyMode {

					}
				}
			}
			searchToAcmLock {
				stateFrom:t = "search"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				actions {
					resetSearchMode {

					}
					setAcmLockMode {

					}
				}
			}
			standbyToAcmLock {
				stateFrom:t = "standby"
				command:t = "acmSwitch"
				stateTo:t = "acmLock"
				command:t = "selectTarget"
				actions {
					resetStandbyMode {

					}
					setAcmLockMode {

					}
				}
			}
			acmLockToAcmTrack {
				stateFrom:t = "acmLock"
				event:t = "targetDetected"
				stateTo:t = "acmTrack"
				actions {
					resetAcmLockMode {

					}
					setTrackMode {

					}
				}
			}
			acmLockToStandby {
				stateFrom:t = "acmLock"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetAcmLockMode {

					}
					setStandbyMode {

					}
				}
			}
			acmLockToSearch {
				stateFrom:t = "acmLock"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					resetAcmLockMode {

					}
					setSearchMode {

					}
				}
			}
			acmTrackToAcmLock {
				stateFrom:t = "acmTrack"
				event:t = "targetsOfInterestCleanup"
				stateTo:t = "acmLock"
				actions {
					resetTrackMode {

					}
					setAcmLockMode {

					}
				}
			}
			acmTrackToStandby {
				stateFrom:t = "acmTrack"
				command:t = "selectTarget"
				event:t = "disable"
				stateTo:t = "standby"
				actions {
					resetTrackMode {

					}
					setStandbyMode {

					}
				}
			}
			acmTrackToSearch {
				stateFrom:t = "acmTrack"
				command:t = "acmSwitch"
				command:t = "switch"
				stateTo:t = "search"
				actions {
					resetTrackMode {

					}
					setSearchMode {

					}
				}
			}
		}
	}
	search {
		stateInit:t = "search"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
					setCenterAzimuth {
						source:t = "constant"
						value:r = 0
					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "constant"
						value:r = 0
					}
					setCenterElevation {
						source:t = "designationCue"
					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					setDistGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					setRelSpeedGatePos {
						source:t = "continuousScale"
						width:r = 0
					}
					detectTarget {

					}
				}
			}
			addTarget {
				event:t = "targetDetected"
				actions {
					addTarget {

					}
					updateActiveDetectedTarget {

					}
				}
			}
			switchSelectedTarget {
				command:t = "switchTarget"
				actions {
					setNextDetectedTargetActive {

					}
				}
			}
			setCueAzimuth {
				command:t = "cueAxisX"
				actions {
					setCueAzimuth {

					}
				}
			}
			setCueDist {
				command:t = "cueAxisY"
				actions {
					setCueDist {

					}
				}
			}
			setCueElevation {
				command:t = "cueAxisZ"
				actions {
					setCueElevation {

					}
				}
			}
			setSelectedTarget {
				command:t = "switchToTarget"
				actions {
					setDetectedTargetActive {

					}
				}
			}
			centerZone {
				command:t = "directionAxesReset"
				actions {
					setCueToBoresight {

					}
					setCenterAzimuth {
						source:t = "designationCue"
					}
					setCenterElevation {
						source:t = "designationCue"
					}
					updateActiveDetectedTarget {

					}
				}
			}
		}
	}
	lock {
		stateInit:t = "lock"
		transitions {
			scan {
				event:t = "update"
				actions {
					scan {

					}
				}
			}
			detect {
				event:t = "targetInSight"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
		}
	}
	track {
		stateInit:t = "track"
		transitions {
			detect {
				event:t = "update"
				actions {
					detectTarget {
						ignoreOwnWeapon:b = true
						rangeMult:r = 1
					}
				}
			}
			track {
				event:t = "targetDetected"
				actions {
					updateActiveTargetOfInterest {
						dirFilter {
							rateLim:p2 = 0.78, 0.78
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
						distFilter {
							accelLim:p2 = 150, 150
							limTimeOut:r = 1
							inertialTimeMax:r = 1
						}
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
			extrapolate {
				event:t = "targetNotDetected"
				actions {
					extrapolateTargetsOfInterest {

					}
					clearTargetsOfInterest {
						timeOut:r = 3
						dirRateLim:r = 1
					}
					setCenterAzimuth {
						source:t = "activeTargetOfInterest"
					}
					setCenterElevation {
						source:t = "activeTargetOfInterest"
					}
					setDistGatePos {
						source:t = "activeTargetOfInterest"
						width:r = 0
					}
				}
			}
		}
	}
	illumination {
		stateInit:t = "init"
		transitions {
			activate {
				event:t = "fsmActivate"
				stateTo:t = "active"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
			deactivate {
				event:t = "fsmDeactivate"
				stateTo:t = "inactive"
				actions {
					setIllumination {
						transiver:b = false
					}
				}
			}
			activateIllumination {
				event:t = "sarhMissileLaunch"
				actions {
					setIlluminationTimeOut {
						timeOut:r = 60
					}
				}
			}
			updateIllumination {
				event:t = "update"
				actions {
					checkIlluminationTimeOut {
						transiver:b = true
						pauseMax:r = 20
					}
				}
			}
		}
	}
}