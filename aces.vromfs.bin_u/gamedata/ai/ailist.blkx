selector {
	name:t = "defaultCTABot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	reaction {
		event:t = "almostBeenHit"
		setNodeWithName {
			nodeName:t = "doPanic"
		}
	}
	reaction {
		event:t = "almostBeenHitFront"
		setNodeWithName {
			nodeName:t = "doFrontalPanic"
		}
	}
	selector {
		selectStrategy:t = "random"
		sequencer {
			reaction {
				event:t = "regularCheck"
				sequencer {
					not {
						isInOuterFightArea {

						}
					}
					recalculateTree {

					}
				}
			}
			setSuitableFightArea {
				tagToCheck:t = "fighter"
				innerRad:r = 2500
				outerRad:r = 4000
			}
			stayInFightArea {

			}
			findUnit {
				searchForAir:b = false
				searchForGround:b = true
				onlyMissionTargets:b = false
				radius:r = 100000
			}
			selector {
				selectStrategy:t = "ordered"
				torpedoTarget {

				}
				bombTarget {

				}
				fighterAttackGround {

				}
			}
		}
		sequencer {
			reaction {
				event:t = "regularCheck"
				sequencer {
					not {
						isInOuterFightArea {

						}
					}
					recalculateTree {

					}
				}
			}
			setSuitableFightArea {
				tagToCheck:t = "fighter"
				innerRad:r = 2500
				outerRad:r = 4000
			}
			stayInFightArea {

			}
			parallel {
				updateTarget {
					searchForAir:b = true
					onlyMissionTargets:b = false
					radius:r = 100000
					distanceDifferenceToMaxSpeedRatio:r = 9
				}
				ifThenElse {
					or {
						isTargetType {
							type:t = "fighter"
						}
						isTargetType {
							type:t = "bomber"
						}
					}
					selector {
						fighterAttackFighter {
							allowSpeedCheat:b = false
						}
					}
					fighterAttackGround {

					}
				}
			}
		}
	}
	sequencer {
		orbitHere {
			speed:r = 260
			rollFactor:r = 0.2
			alt:r = 3000
			maxTime:r = 10
		}
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "assaultBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		findUnit {
			searchForAir:b = false
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 100000
		}
		selector {
			selectStrategy:t = "ordered"
			torpedoTarget {

			}
			bombTarget {

			}
			fighterAttackGround {

			}
		}
	}
	parallel {
		updateTarget {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 100000
			distanceDifferenceToMaxSpeedRatio:r = 9
		}
		ifThenElse {
			or {
				isTargetType {
					type:t = "fighter"
				}
				isTargetType {
					type:t = "bomber"
				}
			}
			selector {
				fighterAttackFighter {
					allowSpeedCheat:b = false
				}
			}
			fighterAttackGround {

			}
		}
	}
}
selector {
	name:t = "captureBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	reaction {
		event:t = "almostBeenHit"
		setNodeWithName {
			nodeName:t = "doPanic"
		}
	}
	reaction {
		event:t = "almostBeenHitFront"
		setNodeWithName {
			nodeName:t = "doFrontalPanic"
		}
	}
	sequencer {
		ifThenElse {
			and {
				checkCaptureZone {
					varName:t = "zoneToCapture"
					cond:t = "landOnly"
				}
				findAirportAtCZ {
					varName:t = "zoneToCapture"
				}
			}
			sequencer {
				findApproachPos {
					dist:r = 2600
				}
				flyToPos {
					speed:r = 350
					dist:r = 1250
					minAlt:r = 100
				}
				findApproachPos {
					dist:r = 900
				}
				flyToPos {
					speed:r = 200
					dist:r = 350
					minAlt:r = 20
				}
				sequencer {
					reaction {
						event:t = "groundAhead"
					}
					reaction {
						event:t = "collisionAhead"
					}
					land {

					}
					afterLanding {

					}
				}
			}
			sequencer {
				setCaptureZoneAsDestination {
					varName:t = "zoneToCapture"
				}
				flyToPos {
					speed:r = 350
					dist:r = 350
					minAlt:r = 200
				}
			}
		}
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "assistCaptureBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	reaction {
		event:t = "almostBeenHit"
		setNodeWithName {
			nodeName:t = "doPanic"
		}
	}
	reaction {
		event:t = "almostBeenHitFront"
		setNodeWithName {
			nodeName:t = "doFrontalPanic"
		}
	}
	setAsLeader {
		varName:t = "planeToAssist"
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 2000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 2000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 2000
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 2000
			degreesToCheck:r = 50
		}
		selector {
			fighterAttackFighter {
				allowSpeedCheat:b = false
			}
		}
	}
	reaction {
		event:t = "regularCheck"
		isTargetDist {
			useTarget:b = true
			op:t = "greater"
			dist:r = 2000
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 2000
			degreesToCheck:r = 50
		}
		recalculateTree {

		}
	}
	followTarget {
		offset:p3 = -20, 10, 30
		useTarget:b = false
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "defenderBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	reaction {
		event:t = "almostBeenHit"
		setNodeWithName {
			nodeName:t = "doPanic"
		}
	}
	reaction {
		event:t = "almostBeenHitFront"
		setNodeWithName {
			nodeName:t = "doFrontalPanic"
		}
	}
	setCaptureZoneAsDestination {
		varName:t = "zoneToDefend"
	}
	selector {
		selectStrategy:t = "ordered"
		sequencer {
			reaction {
				event:t = "regularCheck"
				sequencer {
					or {
						isDistToDest {
							op:t = "greater"
							dist:r = 4000
						}
						isTargetDist {
							useTarget:b = true
							op:t = "greater"
							dist:r = 6000
						}
					}
					recalculateTree {

					}
				}
			}
			isDistToDest {
				op:t = "less"
				dist:r = 2000
			}
			or {
				findEnemyInZone {

				}
				findUnit {
					searchForAir:b = true
					onlyMissionTargets:b = false
					radius:r = 2000
				}
			}
			selector {
				fighterAttackFighter {
					allowSpeedCheat:b = false
				}
			}
		}
		sequencer {
			flyToPos {
				speed:r = 750
				dist:r = 1500
				minAlt:r = 200
				maxTime:r = 5
			}
			setCaptureZoneAsDestination {
				varName:t = "zoneToDefend"
			}
			flyToPos {
				speed:r = 260
				dist:r = 50
				minAlt:r = 200
				maxTime:r = 5
			}
		}
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "seekerBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	reaction {
		event:t = "almostBeenHit"
		setNodeWithName {
			nodeName:t = "doPanic"
		}
	}
	reaction {
		event:t = "almostBeenHitFront"
		setNodeWithName {
			nodeName:t = "doFrontalPanic"
		}
	}
	parallel {
		updateTarget {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 200000
			distanceDifferenceToMaxSpeedRatio:r = 9
		}
		ifThenElse {
			or {
				isTargetType {
					type:t = "fighter"
				}
				isTargetType {
					type:t = "bomber"
				}
			}
			selector {
				fighterAttackFighter {
					allowSpeedCheat:b = false
				}
			}
			fighterAttackGround {

			}
		}
	}
	orbitHere {
		speed:r = 260
		rollFactor:r = 0.2
		alt:r = 3000
		maxTime:r = 10
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			maxRoll:r = 60
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			maxRoll:r = 60
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "idleBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		findCaptureZone {
			zoneType:t = "enemy"
			varName:t = "zoneToCapture"
		}
		setCaptureZoneAsDestination {
			varName:t = "zoneToCapture"
		}
		flyToPos {
			speed:r = 350
			dist:r = 350
			minAlt:r = 200
		}
	}
}
selector {
	name:t = "rearmingBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		orbitHere {
			speed:r = 260
			rollFactor:r = 0.2
			alt:r = 1500
			maxTime:r = 60
		}
		restore {
			rearm:b = true
		}
	}
}
selector {
	name:t = "tankBot"
	selectStrategy:t = "ordered"
	sequencer {
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			setCapturePointAsDest {
				dist:r = 20
			}
			selectExplicitDestination {
				minDist:r = 20
			}
		}
		driveToPos {
			dist:r = 10
		}
	}
}
selector {
	name:t = "shipMissionUnit"
	selectStrategy:t = "ordered"
	selector {
		selectStrategy:t = "ordered"
		selectOnSuccess:b = true
		sequencer {
			findShipLeader {

			}
			followShipLeader {

			}
		}
		sequencer {
			doesntHaveLeader {

			}
			selector {
				selectStrategy:t = "ordered"
				selectOnSuccess:b = true
				transferLeader {

				}
				findNextShipWaypoint {

				}
				checkIfShipHasDestination {

				}
				recalculatePathToTarget {

				}
			}
			shipSail {

			}
		}
	}
	stopShipEngine {

	}
}
parallel {
	name:t = "shipBot"
	selector {
		selectStrategy:t = "ordered"
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				findShipLeader {

				}
				followShipLeader {

				}
			}
			sequencer {
				doesntHaveLeader {

				}
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					transferLeader {

					}
					findNextShipWaypoint {

					}
					checkIfShipHasDestination {

					}
					recalculatePathToTarget {

					}
					findCapturePointToSail {
						canCapture:b = true
					}
				}
				shipSail {

				}
			}
		}
		stopShipEngine {

		}
	}
	sendSupportAircraft {
		timeOutRange:p2 = 10, 30
		attackersPerTargetMax:i = 1
		attacksMax:i = 3
	}
}
selector {
	name:t = "HLBCapture"
	selectStrategy:t = "ordered"
	sequencer {
		listCleaner {
			originalList:t = "unsortedPlanes"
			fromList:t = "assaultPlanes"
		}
		listCleaner {
			originalList:t = "unsortedPlanes"
			fromList:t = "capturePlanes"
		}
		listCleaner {
			originalList:t = "unsortedPlanes"
			fromList:t = "fightingPlanes"
		}
		listCleaner {
			originalList:t = "unsortedPlanes"
			fromList:t = "otherPlanes"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "unsortedPlanes"
			planeName:t = "assaulter"
			capableOf:t = "bombing"
		}
		addToList {
			listName:t = "assaultPlanes"
			varName:t = "assaulter"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "assaulter"
		}
		setBehaviourToPlane {
			planeName:t = "assaulter"
			behaviour:t = "assaultBot"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "unsortedPlanes"
			planeName:t = "assaulter"
			capableOf:t = "torpedoing"
		}
		addToList {
			listName:t = "assaultPlanes"
			varName:t = "assaulter"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "assaulter"
		}
		setBehaviourToPlane {
			planeName:t = "assaulter"
			behaviour:t = "assaultBot"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "unsortedPlanes"
			planeName:t = "assaulter"
			capableOf:t = "rocket_attack"
		}
		addToList {
			listName:t = "assaultPlanes"
			varName:t = "assaulter"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "assaulter"
		}
		setBehaviourToPlane {
			planeName:t = "assaulter"
			behaviour:t = "assaultBot"
		}
	}
	clearIdList {
		listName:t = "zonesToCapture"
	}
	clearIdList {
		listName:t = "zonesToDefend"
	}
	setVarTo {
		varName:t = "enemyCZAfter"
		val:i = -1
	}
	sequencer {
		repeat:b = true
		findCaptureZoneHighLevel {
			czName:t = "enemyCZ"
			friendly:b = false
			afterName:t = "enemyCZAfter"
		}
		setVarTo {
			varName:t = "capturerAfter"
			val:i = -1
		}
		setVarTo {
			varName:t = "alreadyCapturing"
			val:i = 0
		}
		sequencer {
			repeat:b = true
			getFromList {
				listName:t = "capturePlanes"
				varName:t = "capturer"
				indexType:t = "first"
				afterName:t = "capturerAfter"
			}
			getVarIndex {
				listName:t = "capturePlanes"
				varName:t = "capturer"
				toName:t = "capturerAfter"
			}
			ifThenElse {
				isBotVarEqual {
					planeName:t = "capturer"
					varName:t = "enemyCZ"
					botVarName:t = "zoneToCapture"
				}
				not {
					setVarTo {
						varName:t = "alreadyCapturing"
						val:i = 1
					}
				}
				continue {

				}
			}
		}
		setVarTo {
			fromVar:t = "enemyCZ"
			varName:t = "enemyCZAfter"
		}
		ifThenElse {
			compareVar {
				varName:t = "alreadyCapturing"
				value:i = 0
				op:t = "equal"
			}
			addToList {
				listName:t = "zonesToCapture"
				varName:t = "enemyCZ"
			}
			continue {

			}
		}
	}
	setVarTo {
		varName:t = "friendlyCZAfter"
		val:i = -1
	}
	sequencer {
		repeat:b = true
		findCaptureZoneHighLevel {
			czName:t = "friendlyCZ"
			friendly:b = true
			afterName:t = "friendlyCZAfter"
		}
		addToList {
			listName:t = "zonesToDefend"
			varName:t = "friendlyCZ"
		}
		setVarTo {
			fromVar:t = "friendlyCZ"
			varName:t = "friendlyCZAfter"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "unsortedPlanes"
			planeName:t = "fighter"
			capableOf:t = "dog_fight"
		}
		addToList {
			listName:t = "fightingPlanes"
			varName:t = "fighter"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "fighter"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "unsortedPlanes"
			planeName:t = "assaulter"
			capableOf:t = "cannon_attack"
		}
		addToList {
			listName:t = "assaultPlanes"
			varName:t = "assaulter"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "assaulter"
		}
		setBehaviourToPlane {
			planeName:t = "assaulter"
			behaviour:t = "assaultBot"
		}
	}
	sequencer {
		repeat:b = true
		getFromList {
			listName:t = "fightingPlanes"
			varName:t = "capturer"
			indexType:t = "random"
		}
		getClosestCZToPlane {
			listName:t = "zonesToCapture"
			planeName:t = "capturer"
			varName:t = "closestZone"
		}
		removeFromList {
			listName:t = "zonesToCapture"
			varName:t = "closestZone"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "capturer"
		}
		addToList {
			listName:t = "capturePlanes"
			varName:t = "capturer"
		}
		setBehaviourToPlane {
			planeName:t = "capturer"
			behaviour:t = "captureBot"
		}
		setBotVarTo {
			planeName:t = "capturer"
			fromVar:t = "closestZone"
			toVar:t = "zoneToCapture"
		}
		getFromList {
			listName:t = "fightingPlanes"
			varName:t = "assister"
			indexType:t = "random"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "assister"
		}
		setBehaviourToPlane {
			planeName:t = "assister"
			behaviour:t = "assistCaptureBot"
		}
		setBotVarTo {
			planeName:t = "assister"
			fromVar:t = "capturer"
			toVar:t = "planeToAssist"
		}
	}
	sequencer {
		repeat:b = true
		getFromList {
			listName:t = "fightingPlanes"
			varName:t = "defender"
			indexType:t = "random"
		}
		getClosestCZToPlane {
			listName:t = "zonesToDefend"
			planeName:t = "defender"
			varName:t = "closestZone"
		}
		removeFromList {
			listName:t = "zonesToDefend"
			varName:t = "closestZone"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "defender"
		}
		setBehaviourToPlane {
			planeName:t = "defender"
			behaviour:t = "defenderBot"
		}
		setBotVarTo {
			planeName:t = "defender"
			fromVar:t = "closestZone"
			toVar:t = "zoneToDefend"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "fightingPlanes"
			planeName:t = "seeker"
			capableOf:t = "fighting"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "seeker"
		}
		setMissionRank {
			varName:t = "missionRank"
		}
		ifThenElse {
			compareVar {
				varName:t = "missionRank"
				op:t = "equal"
				value:i = 1
			}
			setBehaviourToPlane {
				planeName:t = "seeker"
				behaviour:t = "defaultCTABot"
			}
			setBehaviourToPlane {
				planeName:t = "seeker"
				behaviour:t = "seekerBot"
			}
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "fightingPlanes"
			planeName:t = "assaulter"
			capableOf:t = "cannon_attack"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "assaulter"
		}
		setBehaviourToPlane {
			planeName:t = "assaulter"
			behaviour:t = "assaultBot"
		}
	}
	sequencer {
		repeat:b = true
		findPlaneInListCapableOf {
			listName:t = "fightingPlanes"
			planeName:t = "other"
			capableOf:t = "rearming"
		}
		addToList {
			listName:t = "otherPlanes"
			varName:t = "other"
		}
		removeFromList {
			listName:t = "fightingPlanes"
			varName:t = "other"
		}
		setBehaviourToPlane {
			planeName:t = "other"
			behaviour:t = "rearmingBot"
		}
	}
	sequencer {
		repeat:b = true
		getFromList {
			listName:t = "unsortedPlanes"
			varName:t = "other"
			indexType:t = "last"
		}
		addToList {
			listName:t = "otherPlanes"
			varName:t = "other"
		}
		removeFromList {
			listName:t = "unsortedPlanes"
			varName:t = "other"
		}
		setBehaviourToPlane {
			planeName:t = "other"
			behaviour:t = "rearmingBot"
		}
	}
}
selector {
	name:t = "missionFighter"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		repeat:b = true
		reaction {
			event:t = "almostBeenHit"
			setNodeWithName {
				nodeName:t = "doPanic"
			}
		}
		reaction {
			event:t = "almostBeenHitFront"
			setNodeWithName {
				nodeName:t = "doFrontalPanic"
			}
		}
		stayInFightArea {

		}
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					not {
						isInOuterFightArea {

						}
					}
					hasTargetAnchors {

					}
				}
				recalculateTree {

				}
			}
		}
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			and {
				not {
					isUnitDead {
						unitName:t = "specialTarget"
					}
				}
				setAsTarget {
					varName:t = "specialTarget"
				}
			}
			copyVarTo {
				from:t = "specialTarget"
				to:t = "currentTarget"
			}
			ifThenElse {
				isIndependentAttacker {

				}
				getTargetFromList {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				parallel {
					cycle {
						findLeader {

						}
					}
					getTargetFromListAfterLeader {
						listName:t = "targets"
						varName:t = "currentTarget"
					}
					followTarget {
						offsetFromBot:b = true
						useTarget:b = false
					}
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
				fighterAttackFighter {

				}
			}
			selector {
				selectStrategy:t = "ordered"
				diveBombTarget {

				}
				sequencer {
					not {
						ifThenElse {
							hasDependentAttackers {

							}
							selector {
								selectStrategy:t = "ordered"
								fighterAttackGround {

								}
								parallel {
									cycle {
										hasGroupWeaponForTarget {

										}
									}
									attackGroundFake {

									}
								}
							}
							fighterAttackGround {

							}
						}
					}
					selector {
						spiralUp {
							time:r = 5
						}
						flyToPlane {
							dist:r = 800
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					not {
						isInOuterFightArea {

						}
					}
					hasTargetAnchors {

					}
				}
				recalculateTree {

				}
			}
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "missionBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					bombTarget {

					}
					airDropDelivery {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					bombTarget {

					}
					airDropDelivery {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssault"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							fighterAttackGround {

							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {

									}
								}
								attackGroundFake {

								}
							}
						}
						fighterAttackGround {

						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							fighterAttackGround {

							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {

									}
								}
								attackGroundFake {

								}
							}
						}
						fighterAttackGround {

						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "diveBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionTransport"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					bombTarget {

					}
				}
			}
			bombTarget {

			}
			airDropDelivery {

			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionKamikaze"
	selectStrategy:t = "ordered"
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			kamikazeAttack {

			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
						terrainSensitivity:r = 0
					}
				}
				waypointFollow {

				}
			}
		}
	}
}
selector {
	name:t = "missionFlight"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				setControls {
					controls:t = "flaps"
					setTo:r = 0
					timeTo:r = 0
				}
				flyToPos {
					speed:r = 350
					dist:r = -1
					minAlt:r = 10
				}
			}
			waypointFollow {
				maxRoll:r = 90
				maxPitch:r = 80
				aggressiveness:r = 5
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionRacer"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {
					maxRoll:r = 90
					maxPitch:r = 80
					aggressiveness:r = 5
				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionHitThePoint"
	selectStrategy:t = "ordered"
	hitThePoint {

	}
}
selector {
	name:t = "missionAssault_torpedo_all"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
					spiralUp {

					}
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssaultT"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionFlightWithoutEvaidance"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
			terrainSensitivity:r = 0
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				setControls {
					controls:t = "flaps"
					setTo:r = 0
					timeTo:r = 0
				}
				flyToPos {
					speed:r = 350
					dist:r = -1
					minAlt:r = 10
				}
			}
			waypointFollow {
				maxRoll:r = 90
				maxPitch:r = 80
				aggressiveness:r = 5
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssaultTutorial"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			diveBombTarget {
				dropAlt:r = 350
				diveSpeed:r = 700
			}
			sequencer {
				isTargetDist {
					dist:r = 750
					op:t = "greater"
				}
				clearTargetList {
					listName:t = "targets"
				}
				restore {
					rearm:b = true
				}
			}
			spiralUp {

			}
		}
	}
}
selector {
	name:t = "railFlight"
	parallel {
		railFlight {

		}
		reaction {
			event:t = "missileLaunch"
			releaseCounterMeasures {
				flaresReleasePeriod:r = 0.2
				flaresSerieSize:i = 1
				flaresSeriesReleasePeriod:r = 1
			}
		}
	}
}
selector {
	name:t = "cutsceneFighterVsFighter"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	fighterAttackFighter {

	}
}
selector {
	name:t = "cutsceneFighterVsBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		selectOnSuccess:b = true
		sequencer {
			isFighterSpecialAttackBomber {

			}
			fighterAttackBomber {

			}
		}
		fighterAttackFighter {

		}
	}
}
selector {
	name:t = "cutsceneDiveBombTarget"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	diveBombTarget {
		overrideDropHeight:r = 100
		overrideDiveSpeed:r = 70
	}
}
selector {
	name:t = "testFighterVsFighter"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 100000
		}
		energyAttack {
			allowSpeedCheat:b = false
		}
	}
}
selector {
	name:t = "testFighterVsFighterDM"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 100000
		}
		fighterAttackFighter {
			allowSpeedCheat:b = false
			avoidCollisions:b = false
			ignoreDistance:b = true
		}
	}
}
selector {
	name:t = "tankBotPve"
	selectStrategy:t = "ordered"
	sequencer {
		CheckEnemy {

		}
		RotateToEnemy {

		}
	}
}
selector {
	name:t = "tankBotDriveByRoute"
	selectStrategy:t = "ordered"
	sequencer {
		driveByRoute {
			dist:r = 10
		}
	}
}
selector {
	name:t = "missionTargetEliminator"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = true
			radius:r = 100000
		}
		fighterAttackFighter {

		}
	}
	sequencer {
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = true
			radius:r = 100000
		}
		sequencer {
			selector {
				selectStrategy:t = "ordered"
				diveBombTarget {

				}
				bombTarget {

				}
				fighterAttackGround {

				}
			}
			sequencer {
				reaction {
					event:t = "regularCheck"
					recalculateTree {

					}
				}
				spiralUp {
					spiralHorVertOffset:p2 = 8, 8
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		findWaypoint {

		}
		flyToPos {
			speed:r = 350
			dist:r = 50
			minAlt:r = 20
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = true
			enemy:b = false
			radius:r = 100000
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				isTargetDist {
					op:t = "less"
					value:r = 3000
				}
				findUnit {
					searchForAir:b = true
					onlyMissionTargets:b = false
					enemy:b = true
					radius:r = 10000
				}
				fighterAttackFighter {

				}
			}
			followTarget {

			}
		}
	}
	sequencer {
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		findClosestAirfield {
			onlyFriendly:b = true
			onlyMissionTargets:b = true
		}
		land {

		}
		afterLanding {

		}
		recalculateTree {

		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 100000
		}
		fighterAttackFighter {

		}
	}
	sequencer {
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 10000
		}
		sequencer {
			fighterAttackGround {

			}
			sequencer {
				reaction {
					event:t = "regularCheck"
					recalculateTree {

					}
				}
				spiralUp {
					spiralHorVertOffset:p2 = 8, 8
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "collisionAvoidance"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		climbManeuver {
			alt:r = 3000
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "coopBot"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		name:t = "seq-attackAirTarget"
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 4000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 4000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 2000
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 2000
			wingmenAttack:b = true
		}
		fighterAttackFighter {

		}
	}
	sequencer {
		name:t = "seq-attackGroundTarget"
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 6000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 5000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 4000
		}
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 3000
			degreesToCheck:r = 60
			wingmenAttack:b = true
		}
		selector {
			selectStrategy:t = "ordered"
			diveBombTarget {
				wingmenAttack:b = true
			}
			bombTarget {
				wingmenAttack:b = true
			}
			fighterAttackGround {
				wingmenAttack:b = true
			}
		}
	}
	sequencer {
		name:t = "seq-followLeader"
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	sequencer {
		name:t = "seq-defaultFlight"
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "coopBotAttempt"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		name:t = "seq-attackAirTarget"
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 4000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 4000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 2000
		}
		findUnit {
			searchForAir:b = true
			onlyMissionTargets:b = false
			radius:r = 2000
			wingmenAttack:b = true
		}
		fighterAttackFighter {

		}
	}
	sequencer {
		name:t = "seq-attackGroundTarget"
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 6000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 5000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 4000
		}
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 3000
			degreesToCheck:r = 60
			wingmenAttack:b = true
		}
		fighterAttackGround {
			wingmenAttack:b = true
			useRockets:b = false
		}
	}
	sequencer {
		name:t = "seq-followLeader"
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	sequencer {
		name:t = "seq-defaultFlight"
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "coopBomberAttempt"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 8000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 8000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 6000
		}
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 6000
			degreesToCheck:r = 60
			wingmenAttack:b = true
		}
		fighterAttackGround {
			wingmenAttack:b = true
			useRockets:b = false
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "coopBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					isTargetDist {
						useTarget:b = false
						op:t = "greater"
						dist:r = 8000
					}
					isTargetDist {
						useTarget:b = true
						op:t = "greater"
						dist:r = 8000
					}
				}
				recalculateTree {

				}
			}
		}
		isTargetDist {
			useTarget:b = false
			op:t = "less"
			dist:r = 6000
		}
		findUnit {
			searchForGround:b = true
			onlyMissionTargets:b = false
			radius:r = 6000
			degreesToCheck:r = 60
			wingmenAttack:b = true
		}
		selector {
			selectStrategy:t = "ordered"
			torpedoTarget {
				wingmenAttack:b = true
			}
			diveBombTarget {
				wingmenAttack:b = true
			}
			bombTarget {
				wingmenAttack:b = true
			}
			fighterAttackGround {
				wingmenAttack:b = true
			}
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
}
selector {
	name:t = "leftTurn"
	turn {
		direction:t = "left"
	}
}
selector {
	name:t = "rightTurn"
	turn {
		direction:t = "right"
	}
}
selector {
	name:t = "instructorBeh"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	reaction {
		event:t = "regularCheck"
		sequencer {
			setControls {
				controls:t = "airbrake"
				setTo:r = 0
				timeTo:r = 0
			}
			checkAlt {
				op:t = "greater"
				alt:r = 20
			}
			setControls {
				controls:t = "gears"
				setTo:r = 0
				timeTo:r = 0
			}
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		setControls {
			controls:t = "flaps"
			setTo:r = 0
			timeTo:r = 0
		}
		parallel {
			flyToPos {
				speed:r = 350
				dist:r = -1
				minAlt:r = 10
			}
			setControls {
				controls:t = "rudder"
				setTo:r = 0
				timeTo:r = 1
			}
		}
	}
	parallel {
		name:t = "staying_at_alt"
		stayAtAlt {
			alt:r = 500
		}
		stayAtSpeed {
			speedMode:t = "maxSpeed"
		}
	}
	rollManeuver {

	}
	parallel {
		name:t = "dive1"
		diveManeuver {
			timeToDive:r = 25
			diveAngle:r = 60
		}
		setControls {
			controls:t = "airbrake"
			setTo:r = 1
			timeTo:r = 25
		}
	}
	parallel {
		name:t = "dive2"
		diveManeuver {
			name:t = "dive2"
			timeToDive:r = 20
			diveAngle:r = 90
		}
		setControls {
			controls:t = "airbrake"
			setTo:r = 1
			timeTo:r = 20
		}
	}
	parallel {
		name:t = "rudderCheck"
		stayAtAlt {
			alt:r = 500
		}
		setControls {
			controls:t = "rudder"
			setTo:r = 1
			timeTo:r = 5
		}
	}
	turn {
		name:t = "combatTurn"
		direction:t = "left"
		maxRoll:r = 85
		extremeElevator:b = true
		timeToTurn:r = 7
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		land {

		}
		afterLanding {

		}
	}
	selector {
		name:t = "unitAttackTarget"
		selectStrategy:t = "ordered"
		bombTarget {

		}
		torpedoTarget {

		}
		fighterAttackGround {

		}
	}
	sequencer {
		name:t = "stallMan"
		unitSetProps {
			realisticAI:b = true
		}
		stall {

		}
		antiStall {

		}
		unitSetProps {
			realisticAI:b = false
		}
	}
	sequencer {
		name:t = "wait"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		setControls {
			controls:t = "gears"
			setTo:r = 1
			timeTo:r = 100500
		}
	}
}
selector {
	name:t = "commonBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	flyToPos {
		speed:r = 350
		dist:r = 10
		minAlt:r = 10
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	selector {
		name:t = "unitAttackTarget"
		selectStrategy:t = "ordered"
		bombTarget {

		}
		torpedoTarget {

		}
		fighterAttackGround {

		}
	}
}
selector {
	name:t = "commonFighter"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		reaction {
			event:t = "groundAhead"
			parallel {
				setControls {
					controls:t = "power"
					setTo:r = 1.1
					timeTo:r = 100500
				}
				climbManeuver {
					alt:r = 3000
				}
			}
		}
		findLeader {

		}
		followTarget {
			useTarget:b = false
			offsetFromBot:b = true
			cheatSpeed:b = true
		}
	}
	flyToPos {
		speed:r = 500
		dist:r = 10
		minAlt:r = 10
	}
	sequencer {
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		parallel {
			stayAtAlt {
				alt:r = 3000
			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	selector {
		name:t = "unitAttackTarget"
		selectStrategy:t = "ordered"
		fighterAttackGround {

		}
		fighterAttackFighter {

		}
	}
}
selector {
	name:t = "testAI"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sinus {

	}
	waypointFollow {

	}
}
selector {
	name:t = "catapulted"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			ifThenElse {
				isPlayerOrderActive {
					type:t = "orbit"
				}
				orbitHere {
					speed:r = 250
					rollFactor:r = 0.13
					maxPitch:r = 30
					maxRoll:r = 45
				}
				parallel {
					stayAtCurrentAlt {

					}
					stayAtSpeed {
						speedMode:t = "maxSpeed"
					}
				}
			}
		}
	}
}
selector {
	name:t = "recon_micro"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			ifThenElse {
				isPlayerOrderActive {
					type:t = "orbit"
				}
				orbitHere {
					speed:r = 100
					rollFactor:r = 0.13
					maxPitch:r = 30
					maxRoll:r = 45
				}
				parallel {
					stayAtCurrentAlt {
						aggressiveness:r = 0.3
						terrainSensitivity:r = 0.25
					}
					stayAtSpeed {
						speedMode:t = "maxSpeed"
					}
				}
			}
		}
	}
}
selector {
	name:t = "quadcopter"
	autopilotHover {

	}
}
selector {
	name:t = "carrierFighter"
	selectStrategy:t = "ordered"
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	selector {
		selectStrategy:t = "ordered"
		selectOnSuccess:b = true
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		sequencer {
			not {
				findLeader {
					findOwnedUnit:b = false
				}
			}
			isPlayerOrderActive {
				type:t = "point"
			}
			flyToPos {
				speed:r = 350
				dist:r = 600
				minAlt:r = 200
				unreachableMaxTime:r = 60
			}
			removeGroupCurrentPlayerOrder {

			}
		}
		sequencer {
			hasWeaponTypes {
				weaponType:t = "guns"
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				sequencer {
					setGroupLeaderAs {
						varName:t = "groupLeader"
					}
					setUnitTargetAs {
						botVarName:t = "groupLeader"
						varName:t = "groupLeaderTarget"
					}
					setAsTarget {
						varName:t = "groupLeaderTarget"
					}
				}
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					sequencer {
						isPlayerOrderActive {
							type:t = "attack"
							varName:t = "playerTarget"
						}
						setAsTarget {
							varName:t = "playerTarget"
						}
					}
					sequencer {
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								isPlayerOrderActive {
									type:t = "hunt"
								}
								setSelfAs {
									varName:t = "defendable"
								}
							}
							isPlayerOrderActive {
								type:t = "defend"
								varName:t = "defendable"
							}
						}
						updateVipThreat {
							vipVarName:t = "defendable"
							targetType:t = "airplane"
							targetToAnchorDist:p2 = 5000, 8000
							targetToAnchorMeetDist:p2 = 0, 0
						}
					}
				}
			}
			success {
				selector {
					selectStrategy:t = "ordered"
					sequencer {
						isTargetType {
							type:t = "fighter"
						}
						fighterAttackFighter {

						}
					}
					sequencer {
						isTargetType {
							type:t = "bomber"
						}
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								isFighterSpecialAttackBomber {

								}
								fighterAttackBomber {

								}
							}
							fighterAttackFighter {

							}
						}
					}
				}
			}
			sequencer {
				not {
					findLeader {
						findOwnedUnit:b = false
					}
				}
				isPlayerOrderActive {
					type:t = "attack"
					varName:t = "playerTarget"
				}
				removeGroupCurrentPlayerOrder {

				}
			}
		}
		isPlayerOrderActive {
			type:t = "rtb"
		}
	}
	sequencer {
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		ifThenElse {
			sequencer {
				setHostAs {
					varName:t = "vip"
				}
				setUnitAsLeader {
					varName:t = "vip"
				}
			}
			selector {
				selectStrategy:t = "ordered"
				selectOnSuccess:b = true
				sequencer {
					isPlayerOrderActive {
						type:t = "defend"
						varName:t = "defendable"
					}
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
				}
				sequencer {
					isPlayerOrderActive {
						type:t = "hunt"
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
				parallel {
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
					returnTo {
						varName:t = "vip"
						distMax:r = 300
					}
				}
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
			}
		}
	}
}
selector {
	name:t = "carrierBomber"
	selectStrategy:t = "ordered"
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	selector {
		selectStrategy:t = "ordered"
		selectOnSuccess:b = true
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		sequencer {
			not {
				findLeader {
					findOwnedUnit:b = false
				}
			}
			isPlayerOrderActive {
				type:t = "point"
			}
			flyToPos {
				speed:r = 350
				dist:r = 600
				minAlt:r = 200
				unreachableMaxTime:r = 60
			}
			removeGroupCurrentPlayerOrder {

			}
		}
		sequencer {
			or {
				hasWeaponTypes {
					weaponType:t = "bombs"
					weaponType:t = "cannons"
					weaponType:t = "rockets"
				}
				hasDependentAttackers {

				}
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				sequencer {
					setGroupLeaderAs {
						varName:t = "groupLeader"
					}
					setUnitTargetAs {
						botVarName:t = "groupLeader"
						varName:t = "groupLeaderTarget"
					}
					setAsTarget {
						varName:t = "groupLeaderTarget"
					}
				}
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					sequencer {
						isPlayerOrderActive {
							type:t = "attack"
							varName:t = "playerTarget"
						}
						setAsTarget {
							varName:t = "playerTarget"
						}
					}
					sequencer {
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								isPlayerOrderActive {
									type:t = "hunt"
								}
								setSelfAs {
									varName:t = "defendable"
								}
							}
							isPlayerOrderActive {
								type:t = "defend"
								varName:t = "defendable"
							}
						}
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								or {
									hasWeaponTypes {
										weaponType:t = "bombs"
									}
									hasDependentAttackers {

									}
								}
								updateVipThreat {
									vipVarName:t = "defendable"
									targetType:t = "ship"
									targetToAnchorDist:p2 = 5000, 8000
									targetToAnchorMeetDist:p2 = 0, 0
								}
							}
							sequencer {
								or {
									hasWeaponTypes {
										weaponType:t = "cannons"
										weaponType:t = "rockets"
									}
									hasDependentAttackers {

									}
								}
								updateVipThreat {
									vipVarName:t = "defendable"
									targetType:t = "boat"
									targetToAnchorDist:p2 = 5000, 8000
									targetToAnchorMeetDist:p2 = 0, 0
								}
							}
						}
					}
				}
			}
			success {
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					sequencer {
						isTargetType {
							type:t = "bigShip"
						}
						selector {
							selectStrategy:t = "ordered"
							torpedoTarget {
								instantAttack:b = true
								fireMode:t = "salvo"
							}
							bombTarget {
								instantAttack:b = true
								fireMode:t = "salvo"
								carpetBombing:b = false
							}
							sequencer {
								hasDependentAttackers {

								}
								parallel {
									cycle {
										hasGroupWeaponTypes {
											weaponType:t = "bombs"
										}
									}
									attackGroundFake {

									}
								}
							}
						}
					}
					sequencer {
						isTargetType {
							type:t = "smallShip"
						}
						selector {
							selectStrategy:t = "ordered"
							bombTarget {
								instantAttack:b = true
								fireMode:t = "salvo"
								carpetBombing:b = false
							}
							fighterAttackGround {
								instantAttack:b = true
								fireMode:t = "salvo"
							}
							sequencer {
								hasDependentAttackers {

								}
								parallel {
									cycle {
										hasGroupWeaponTypes {
											weaponType:t = "bombs"
											weaponType:t = "rockets"
											weaponType:t = "guns"
										}
									}
									attackGroundFake {

									}
								}
							}
						}
					}
				}
			}
			sequencer {
				not {
					findLeader {
						findOwnedUnit:b = false
					}
				}
				isPlayerOrderActive {
					type:t = "attack"
					varName:t = "playerTarget"
				}
				removeGroupCurrentPlayerOrder {

				}
			}
		}
		isPlayerOrderActive {
			type:t = "rtb"
		}
	}
	sequencer {
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		ifThenElse {
			sequencer {
				setHostAs {
					varName:t = "vip"
				}
				setUnitAsLeader {
					varName:t = "vip"
				}
			}
			selector {
				selectStrategy:t = "ordered"
				selectOnSuccess:b = true
				sequencer {
					isPlayerOrderActive {
						type:t = "defend"
						varName:t = "defendable"
					}
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
				}
				sequencer {
					isPlayerOrderActive {
						type:t = "hunt"
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
				parallel {
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
					returnTo {
						varName:t = "vip"
						distMax:r = 300
					}
				}
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
			}
		}
	}
}
selector {
	name:t = "carrierDiveBomber"
	selectStrategy:t = "ordered"
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	selector {
		selectStrategy:t = "ordered"
		selectOnSuccess:b = true
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		sequencer {
			not {
				findLeader {
					findOwnedUnit:b = false
				}
			}
			isPlayerOrderActive {
				type:t = "point"
			}
			flyToPos {
				speed:r = 350
				dist:r = 600
				minAlt:r = 200
				unreachableMaxTime:r = 60
			}
			removeGroupCurrentPlayerOrder {

			}
		}
		sequencer {
			or {
				hasWeaponTypes {
					weaponType:t = "bombs"
					weaponType:t = "cannons"
					weaponType:t = "rockets"
				}
				hasDependentAttackers {

				}
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				sequencer {
					setGroupLeaderAs {
						varName:t = "groupLeader"
					}
					setUnitTargetAs {
						botVarName:t = "groupLeader"
						varName:t = "groupLeaderTarget"
					}
					setAsTarget {
						varName:t = "groupLeaderTarget"
					}
				}
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					sequencer {
						isPlayerOrderActive {
							type:t = "attack"
							varName:t = "playerTarget"
						}
						setAsTarget {
							varName:t = "playerTarget"
						}
					}
					sequencer {
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								isPlayerOrderActive {
									type:t = "hunt"
								}
								setSelfAs {
									varName:t = "defendable"
								}
							}
							isPlayerOrderActive {
								type:t = "defend"
								varName:t = "defendable"
							}
						}
						selector {
							selectStrategy:t = "ordered"
							selectOnSuccess:b = true
							sequencer {
								or {
									hasWeaponTypes {
										weaponType:t = "bombs"
									}
									hasDependentAttackers {

									}
								}
								updateVipThreat {
									vipVarName:t = "defendable"
									targetType:t = "ship"
									targetToAnchorDist:p2 = 5000, 8000
									targetToAnchorMeetDist:p2 = 0, 0
								}
							}
							sequencer {
								or {
									hasWeaponTypes {
										weaponType:t = "cannons"
										weaponType:t = "rockets"
									}
									hasDependentAttackers {

									}
								}
								updateVipThreat {
									vipVarName:t = "defendable"
									targetType:t = "boat"
									targetToAnchorDist:p2 = 5000, 8000
									targetToAnchorMeetDist:p2 = 0, 0
								}
							}
						}
					}
				}
			}
			success {
				selector {
					selectStrategy:t = "ordered"
					selectOnSuccess:b = true
					sequencer {
						isTargetType {
							type:t = "bigShip"
						}
						selector {
							selectStrategy:t = "ordered"
							diveBombTarget {
								instantAttack:b = true
								fireMode:t = "salvo"
							}
							sequencer {
								hasDependentAttackers {

								}
								parallel {
									cycle {
										hasGroupWeaponTypes {
											weaponType:t = "bombs"
										}
									}
									attackGroundFake {

									}
								}
							}
						}
					}
					sequencer {
						isTargetType {
							type:t = "smallShip"
						}
						selector {
							selectStrategy:t = "ordered"
							diveBombTarget {
								instantAttack:b = true
								fireMode:t = "salvo"
							}
							fighterAttackGround {
								instantAttack:b = true
								fireMode:t = "salvo"
							}
							sequencer {
								hasDependentAttackers {

								}
								parallel {
									cycle {
										hasGroupWeaponTypes {
											weaponType:t = "bombs"
											weaponType:t = "rockets"
											weaponType:t = "guns"
										}
									}
									attackGroundFake {

									}
								}
							}
						}
					}
				}
			}
			sequencer {
				not {
					findLeader {
						findOwnedUnit:b = false
					}
				}
				isPlayerOrderActive {
					type:t = "attack"
					varName:t = "playerTarget"
				}
				removeGroupCurrentPlayerOrder {

				}
			}
		}
		isPlayerOrderActive {
			type:t = "rtb"
		}
	}
	sequencer {
		reaction {
			event:t = "groundAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "collisionAhead"
			parallel {
				turnToEvasiveDir {

				}
				stayAtSpeed {
					speedMode:t = "boostOn"
				}
			}
		}
		reaction {
			event:t = "outsideBattleField"
			flyToPos {
				speed:r = 550
				dist:r = -1
				minAlt:r = 100
				destType:t = "battleField"
			}
		}
		reaction {
			event:t = "regularCheck"
			recalculateTree {

			}
		}
		ifThenElse {
			sequencer {
				setHostAs {
					varName:t = "vip"
				}
				setUnitAsLeader {
					varName:t = "vip"
				}
			}
			selector {
				selectStrategy:t = "ordered"
				selectOnSuccess:b = true
				sequencer {
					isPlayerOrderActive {
						type:t = "defend"
						varName:t = "defendable"
					}
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
				}
				sequencer {
					isPlayerOrderActive {
						type:t = "hunt"
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
				parallel {
					followTarget {
						offsetFromBot:b = false
						useTarget:b = false
						offset:p3 = 0, 600, 0
					}
					returnTo {
						varName:t = "vip"
						distMax:r = 300
					}
				}
			}
			ifThenElse {
				findLeader {
					findOwnedUnit:b = false
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					orbitHere {
						speed:r = 250
						alt:r = 600
					}
				}
			}
		}
	}
}
selector {
	name:t = "eventMissionSimpleEnergyAttack"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	sequencer {
		name:t = "seq-findAndAttack"
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			name:t = "sel-energyAttack"
			energyAttack {

			}
		}
	}
}