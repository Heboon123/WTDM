selector {
	name:t = "missionFighter"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		repeat:b = true
		reaction {
			event:t = "almostBeenHit"
			setNodeWithName {
				nodeName:t = "doPanic"
			}
		}
		reaction {
			event:t = "almostBeenHitFront"
			setNodeWithName {
				nodeName:t = "doFrontalPanic"
			}
		}
		stayInFightArea {

		}
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					not {
						isInOuterFightArea {

						}
					}
					hasTargetAnchors {

					}
				}
				recalculateTree {

				}
			}
		}
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			and {
				not {
					isUnitDead {
						unitName:t = "specialTarget"
					}
				}
				setAsTarget {
					varName:t = "specialTarget"
				}
			}
			copyVarTo {
				from:t = "specialTarget"
				to:t = "currentTarget"
			}
			ifThenElse {
				isIndependentAttacker {

				}
				getTargetFromList {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				parallel {
					cycle {
						findLeader {

						}
					}
					getTargetFromListAfterLeader {
						listName:t = "targets"
						varName:t = "currentTarget"
					}
					followTarget {
						offsetFromBot:b = true
						useTarget:b = false
					}
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
				fighterAttackFighter {

				}
			}
			selector {
				selectStrategy:t = "ordered"
				diveBombTarget {

				}
				sequencer {
					not {
						ifThenElse {
							hasDependentAttackers {

							}
							selector {
								selectStrategy:t = "ordered"
								fighterAttackGround {

								}
								parallel {
									cycle {
										hasGroupWeaponForTarget {

										}
									}
									attackGroundFake {

									}
								}
							}
							fighterAttackGround {

							}
						}
					}
					selector {
						spiralUp {
							time:r = 5
						}
						flyToPlane {
							dist:r = 800
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		reaction {
			event:t = "regularCheck"
			sequencer {
				or {
					not {
						isInOuterFightArea {

						}
					}
					hasTargetAnchors {

					}
				}
				recalculateTree {

				}
			}
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
	selector {
		name:t = "doPanic"
		rollManeuver {

		}
		bellManeuver {

		}
		roll180Man {

		}
		waveout {

		}
		sinus {

		}
		zigzagSplit {

		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
	selector {
		name:t = "doFrontalPanic"
		rollManeuver {

		}
		roll180Man {

		}
		sinus {

		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 1.3
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.4
		}
		turn {
			direction:t = "right"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
		turn {
			direction:t = "left"
			extremeElevator:b = true
			timeToTurn:r = 0.5
		}
	}
}
selector {
	name:t = "missionBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					bombTarget {

					}
					airDropDelivery {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					bombTarget {

					}
					airDropDelivery {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssault"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
				fighterAttackFighter {

				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							fighterAttackGround {

							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {

									}
								}
								attackGroundFake {

								}
							}
						}
						fighterAttackGround {

						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							fighterAttackGround {

							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {

									}
								}
								attackGroundFake {

								}
							}
						}
						fighterAttackGround {

						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "diveBomber"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isIndependentAttacker {

			}
			ifThenElse {
				isRandomTargets {

				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "random"
				}
				getFromListBTB {
					listName:t = "targets"
					varName:t = "currentTarget"
					indexType:t = "first"
				}
			}
			parallel {
				cycle {
					findLeader {

					}
				}
				getFromListBTBAfterLeader {
					listName:t = "targets"
					varName:t = "currentTarget"
				}
				followTarget {
					offsetFromBot:b = true
					useTarget:b = false
				}
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					ifThenElse {
						hasDependentAttackers {

						}
						selector {
							selectStrategy:t = "ordered"
							sequencer {
								isAuxWeaponAllowed {

								}
								fighterAttackGround {

								}
							}
							parallel {
								cycle {
									hasGroupWeaponForTarget {
										checkAuxWeapon:b = true
									}
								}
								attackGroundFake {

								}
							}
						}
						sequencer {
							isAuxWeaponAllowed {

							}
							fighterAttackGround {

							}
						}
					}
				}
			}
		}
	}
	resetTarget {

	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionTransport"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					bombTarget {

					}
				}
			}
			bombTarget {

			}
			airDropDelivery {

			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionKamikaze"
	selectStrategy:t = "ordered"
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			kamikazeAttack {

			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
						terrainSensitivity:r = 0
					}
				}
				waypointFollow {

				}
			}
		}
	}
}
selector {
	name:t = "missionFlight"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				setControls {
					controls:t = "flaps"
					setTo:r = 0
					timeTo:r = 0
				}
				flyToPos {
					speed:r = 350
					dist:r = -1
					minAlt:r = 10
				}
			}
			waypointFollow {
				maxRoll:r = 90
				maxPitch:r = 80
				aggressiveness:r = 5
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionRacer"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {
					maxRoll:r = 90
					maxPitch:r = 80
					aggressiveness:r = 5
				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionHitThePoint"
	selectStrategy:t = "ordered"
	hitThePoint {

	}
}
selector {
	name:t = "missionAssault_torpedo_all"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
					spiralUp {

					}
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssaultT"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			selectOnSuccess:b = true
			sequencer {
				isTargetType {
					type:t = "fighter"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bomber"
				}
			}
			sequencer {
				isTargetType {
					type:t = "bigShip"
				}
				selector {
					selectStrategy:t = "ordered"
					torpedoTarget {

					}
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
				}
			}
			sequencer {
				selector {
					selectStrategy:t = "ordered"
					diveBombTarget {

					}
					bombTarget {

					}
					fighterAttackGround {

					}
				}
			}
		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		ifThenElse {
			findLeader {

			}
			followTarget {
				offsetFromBot:b = true
				useTarget:b = false
			}
			selector {
				selectStrategy:t = "ordered"
				sequencer {
					setControls {
						controls:t = "flaps"
						setTo:r = 0
						timeTo:r = 0
					}
					flyToPos {
						speed:r = 350
						dist:r = -1
						minAlt:r = 10
					}
				}
				waypointFollow {

				}
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionFlightWithoutEvaidance"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
			terrainSensitivity:r = 0
		}
	}
	selector {
		selectStrategy:t = "ordered"
		name:t = "taxi_and_takeoff"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "collisionAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		sequencer {
			isOnAirfield {

			}
			findClosestAirfield {

			}
			waitForAirfieldClearance {

			}
			taxiOnAirfield {

			}
			takeoff {

			}
		}
		waitOnLand {

		}
	}
	sequencer {
		reaction {
			event:t = "outsideBattleField"
		}
		selector {
			selectStrategy:t = "ordered"
			sequencer {
				setControls {
					controls:t = "flaps"
					setTo:r = 0
					timeTo:r = 0
				}
				flyToPos {
					speed:r = 350
					dist:r = -1
					minAlt:r = 10
				}
			}
			waypointFollow {
				maxRoll:r = 90
				maxPitch:r = 80
				aggressiveness:r = 5
			}
		}
	}
	sequencer {
		name:t = "unitLandOnAirfield"
		reaction {
			event:t = "groundAhead"
		}
		reaction {
			event:t = "outsideBattleField"
		}
		land {

		}
		afterLanding {

		}
	}
}
selector {
	name:t = "missionAssaultTutorial"
	selectStrategy:t = "ordered"
	reaction {
		event:t = "groundAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "collisionAhead"
		parallel {
			turnToEvasiveDir {

			}
			stayAtSpeed {
				speedMode:t = "boostOn"
			}
		}
	}
	reaction {
		event:t = "outsideBattleField"
		flyToPos {
			speed:r = 550
			dist:r = -1
			minAlt:r = 100
			destType:t = "battleField"
		}
	}
	sequencer {
		clearTargetList {
			listName:t = "targets"
		}
		ifThenElse {
			isRandomTargets {

			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "random"
			}
			getFromListBTB {
				listName:t = "targets"
				varName:t = "currentTarget"
				indexType:t = "first"
			}
		}
		setAsTarget {
			varName:t = "currentTarget"
		}
		selector {
			selectStrategy:t = "ordered"
			diveBombTarget {
				dropAlt:r = 350
				diveSpeed:r = 700
			}
			sequencer {
				isTargetDist {
					dist:r = 750
					op:t = "greater"
				}
				clearTargetList {
					listName:t = "targets"
				}
				restore {
					rearm:b = true
				}
			}
			spiralUp {

			}
		}
	}
}
selector {
	name:t = "railFlight"
	parallel {
		railFlight {

		}
		reaction {
			event:t = "missileLaunch"
			releaseCounterMeasures {
				flaresReleasePeriod:r = 0.2
				flaresSerieSize:i = 1
				flaresSeriesReleasePeriod:r = 1
			}
		}
	}
}